<Type Name="File+IFileAbstraction" FullName="TagLib.File+IFileAbstraction">
  <TypeSignature Language="C#" Value="public interface File.IFileAbstraction" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Members>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name provided in call to <see cref="T:TagLib.File+FileAbstractionCreator" />.</summary>
        <value>A <see cref="System.String" /> providing the identifier used in creating the file.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream ReadStream { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a readable, seekable stream for the file referenced in the current instance.</summary>
        <value>A <see cref="T:System.IO.Stream" /> for reading from the file.</value>
        <remarks>The stream will be closed external to the interface and should be created when the attribute is invoked.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteStream">
      <MemberSignature Language="C#" Value="public System.IO.Stream WriteStream { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a writable, seekable stream for the file referenced in the current instance.</summary>
        <value>A <see cref="T:System.IO.Stream" /> for writing from the file.</value>
        <remarks>The stream will be closed external to the interface and should be created when the attribute is invoked.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseStream">
      <MemberSignature Language="C#" Value="public void CloseStream (System.IO.Stream stream);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">A <see cref="T:System.IO.Stream" /> originally created by the current instance.</param>
        <summary>Closes a stream created by the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>Interface providing abstracted access to a file.</summary>
    <remarks>
      <para>Implement this interface to access data from non-standard sources. This is useful for accessing a custom VFS. To register it with the <see cref="T:TagLib.File" /> class, a <see cref="T:TagLib.File+FileAbstractionCreator" /> must be created. The delegate can then be registered with <see cref="M:TagLib.File.PushFileAbstractionCreator(TagLib.File+FileAbstractionCreator)" /> and unregistered with <see cref="M:TagLib.File.PopFileAbstractionCreator()" />.</para>
      <example>
        <code lang="C#">using TagLib;
using Gnome.Vfs;

public class ReadTitle
{
   public static void Main (string [] args)
   {
      if (args.Length != 1)
         return;

      Gnome.Vfs.Vfs.Initialize ();
      TagLib.File.PushFileAbstractionCreator (VfsFileAbstraction.CreateFile);
      
      try
      {
          TagLib.File file = TagLib.File.Create (args [0]);
          System.Console.WriteLine (file);
      }
      finally
      {
         TagLib.File.PopFileAbstractionCreator()
         Vfs.Shutdown()
      }
   }
}

public class VfsFileAbstraction : TagLib.File.IFileAbstraction
{
    private string name;

    public VfsFileAbstraction(string file)
    {
        name = file;
    }

    public string Name {
        get { return name; }
    }

    public System.IO.Stream ReadStream {
        get { return new VfsStream(Name, System.IO.FileMode.Open); }
    }

    public System.IO.Stream WriteStream {
        get { return new VfsStream(Name, System.IO.FileMode.Open); }
    }

    public void CloseStream (System.IO.Stream stream)
    {
        stream.Close ();
    }
    
    public static TagLib.File.IFileAbstraction CreateFile(string path)
    {
        return new VfsFileAbstraction(path);
    }
}</code>
        <code lang="Boo"># Read the title from a single uri

import TagLib from "taglib-sharp.dll"
import Gnome.Vfs from "gnome-vfs-sharp"

class VfsFileAbstraction(TagLib.File.IFileAbstraction):
        
        _name as string
        
        def constructor(file as string):
                _name = file
        
        Name:
                get:
                        return _name
                
        ReadStream:
                get:
                        return VfsStream(_name, FileMode.Open)
                
        WriteStream:
                get:
                        return VfsStream(_name, FileMode.Open)
        
        def CloseStream (stream as System.IO.Stream) as void:
                stream.Close ()
        
def CreateFile(path):
       return VfsFileAbstraction(path)

if len(argv) == 1:
        Vfs.Initialize()
        TagLib.File.PushFileAbstractionCreator(TagLib.File.FileAbstractionCreator(CreateFile))

        try:
                file as TagLib.File = TagLib.File.Create (argv[0])
                print file.Tag.Title
        ensure:
                TagLib.File.PopFileAbstractionCreator()
                Vfs.Shutdown()</code>
      </example>
    </remarks>
  </Docs>
</Type>
