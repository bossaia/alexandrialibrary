<Type Name="Tag" FullName="TagLib.Ape.Tag">
  <TypeSignature Language="C#" Value="public class Tag : TagLib.Tag, System.Collections.Generic.IEnumerable&lt;string&gt;" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>TagLib.Tag</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;System.String&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tag ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.Ape.Tag" /> with no content.</summary>
        <remarks>To access or create an <see cref="T:TagLib.Ape.Tag" /> in an existing <see cref="T:TagLib.File" />, use <see cref="M:TagLib.File.GetTag(TagLib.TagTypes,bool)" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tag (TagLib.File file, long position);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="file" Type="TagLib.File" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="file">A <see cref="T:TagLib.File" /> containing a tag to read.</param>
        <param name="position">A <see cref="T:System.Int64" /> specifying at what seek position to start reading.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.Ape.Tag" /> by reading from a <see cref="T:TagLib.File" /> at a specified position.</summary>
        <remarks>
          <para>To access or create an <see cref="T:TagLib.Ape.Tag" /> in an existing <see cref="T:TagLib.File" />, use <see cref="M:TagLib.File.GetTag(TagLib.TagTypes,bool)" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public TagLib.ByteVector Render ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a <see cref="T:TagLib.ByteVector" /> containing an APE tag representation of the current instance.</summary>
        <returns>A <see cref="T:TagLib.ByteVector" /> containing an APE tag representation of the current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveItem">
      <MemberSignature Language="C#" Value="public void RemoveItem (string key);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">A <see cref="T:System.String" /> representing an APE item key.</param>
        <summary>Removes a specified item from the current instance, if it exists.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetItem">
      <MemberSignature Language="C#" Value="public TagLib.Ape.Item GetItem (string key);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Ape.Item</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">A <see cref="T:System.String" /> representing an APE item key.</param>
        <summary>Gets a specified APE item from the current instance.</summary>
        <returns>Either a <see cref="T:TagLib.Ape.Item" /> if one is found with a matching key, otherwise <see langword="null" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string key, uint number, uint count);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="number" Type="System.UInt32" />
        <Parameter Name="count" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="key">A <see cref="T:System.String" /> representing an APE item key.</param>
        <param name="number">A <see cref="T:System.UInt32" />.</param>
        <param name="count">A <see cref="T:System.UInt32" /> representing a total which <paramref name="number" /> is a part of, or zero if <paramref name="number" /> is not part of a set.</param>
        <summary>Sets a numeric value in an ape item.</summary>
        <remarks>If both <paramref name="number" /> and <paramref name="count" /> are equal to zero, the value will be cleared. If <paramref name="count" /> is zero, <paramref name="number" /> by itself will be stored. Otherwise, the values will be stored as "<paramref name="number" />/<paramref name="count" />".</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string key, string value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">A <see cref="T:System.String" /> representing an APE item key.</param>
        <param name="value">A <see cref="T:System.String" /> to be appended to the current item value.</param>
        <summary>Adds a string value to an ape item.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="protected void Read (TagLib.File file, long position);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="file" Type="TagLib.File" />
        <Parameter Name="position" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="file">A <see cref="T:TagLib.File" /> containing a tag to read.</param>
        <param name="position">A <see cref="T:System.Int64" /> specifying at what seek position to start reading.</param>
        <summary>Populates the current instance by reading a tag from a file.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="protected void Parse (TagLib.ByteVector data);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:TagLib.ByteVector" /> containing APE items.</param>
        <summary>Parses a <see cref="T:TagLib.ByteVector" /> to populate the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string key, string[] value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="key">A <see cref="T:System.String" /> representing an APE item key.</param>
        <param name="value">A <see cref="T:System.String" /> array containing values to be appended to the current item value.</param>
        <summary>Adds a collection of string values to an ape item.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddValue">
      <MemberSignature Language="C#" Value="public void AddValue (string key, uint number, uint count);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="number" Type="System.UInt32" />
        <Parameter Name="count" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="key">A <see cref="T:System.String" /> representing an APE item key.</param>
        <param name="number">A <see cref="T:System.UInt32" />.</param>
        <param name="count">A <see cref="T:System.UInt32" /> representing a total which <paramref name="number" /> is a part of, or zero if <paramref name="number" /> is not part of a set.</param>
        <summary>Adds a numeric value to an ape item.</summary>
        <remarks>If both <paramref name="number" /> and <paramref name="count" /> are equal to zero, the value will not be added. If <paramref name="count" /> is zero, <paramref name="number" /> by itself will be added.

Otherwise, the values will be added as "<paramref name="number" />/<paramref name="count" />".</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItem">
      <MemberSignature Language="C#" Value="public void SetItem (TagLib.Ape.Item item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="TagLib.Ape.Item" />
      </Parameters>
      <Docs>
        <param name="item">A <see cref="T:TagLib.Ape.Item" /> to be included in the current instance.</param>
        <summary>Stores an <see cref="T:TagLib.Ape.Item" /> in the current instance, replacing the current item with the same key if one exists.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string key, string value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">A <see cref="T:System.String" /> representing an APE item key.</param>
        <param name="value">A <see cref="T:System.String" /> to store.</param>
        <summary>Sets a string value in an ape item.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public void SetValue (string key, string[] value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="key">A <see cref="T:System.String" /> representing an APE item key.</param>
        <param name="value">A <see cref="T:System.String" /> array containing values to store.</param>
        <summary>Sets a collection of string values in an ape item.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="HeaderPresent">
      <MemberSignature Language="C#" Value="public bool HeaderPresent { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets and sets whether or not the tag will be rendered with a header.</summary>
        <value>A <see cref="T:System.Boolean" /> specifying whether or not a header will be rendered.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FileIdentifier">
      <MemberSignature Language="C#" Value="public static readonly TagLib.ReadOnlyByteVector FileIdentifier;" />
      <MemberType>Field</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ReadOnlyByteVector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the identifier used for finding APE tags in a file.</summary>
        <remarks>Always "APETAGEX".</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;string&gt; GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the enumerator for the current instance.</summary>
        <returns>A <see cref="T:System.Collections.Generic.IEnumerator&lt;System.String&gt;" /> enumerating through the item keys contained in the current instance.</returns>
        <remarks />
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>This class is used to access and manipulate tags stored in the APE tagging format.</summary>
    <remarks />
  </Docs>
</Type>
