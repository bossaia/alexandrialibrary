<Type Name="WaveFormatEx" FullName="TagLib.Riff.WaveFormatEx">
  <TypeSignature Language="C#" Value="public struct WaveFormatEx : TagLib.IAudioCodec" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>TagLib.IAudioCodec</InterfaceName>
    </Interface>
  </Interfaces>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WaveFormatEx (TagLib.ByteVector data);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="data" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:TagLib.ByteVector" /> containing the Microsoft WavFormatEx structure to be read.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.Riff.WaveFormatEx" /> by reading the Microsoft WavFormatEx structure from the beginning of a <see cref="T:TagLib.ByteVector" />.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public WaveFormatEx (TagLib.ByteVector data, int offset);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="data" Type="TagLib.ByteVector" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:TagLib.ByteVector" /> containing the Microsoft WavFormatEx structure to be read.</param>
        <param name="offset">A <see cref="T:System.Int32" /> specifying at what index the structure begins.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.Riff.WaveFormatEx" /> by reading the Microsoft WavFormatEx structure from a specific point in a <see cref="T:TagLib.ByteVector" />.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FormatTag">
      <MemberSignature Language="C#" Value="public ushort FormatTag { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the audio format tag for the current instance. A format tag is a unique identifier for a specific audio codec.</summary>
        <value>A <see cref="T:System.UInt16" /> representing the format tag.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AverageBytesPerSecond">
      <MemberSignature Language="C#" Value="public uint AverageBytesPerSecond { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the average number of bytes per second in the current instance.</summary>
        <value>A <see cref="T:System.Int32" /> representing the average number of bytes per second.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="BitsPerSample">
      <MemberSignature Language="C#" Value="public ushort BitsPerSample { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of bits per second in the current instance.</summary>
        <value>A <see cref="T:System.Int32" /> representing the numbers of bits per sample.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a plain text description of the current instance.</summary>
        <value>A <see cref="T:System.String" /> describing the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AudioBitrate">
      <MemberSignature Language="C#" Value="public int AudioBitrate { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the audio bitrate of the current instance.</summary>
        <value>A <see cref="T:System.Int32" /> representing the audio bitrate.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AudioChannels">
      <MemberSignature Language="C#" Value="public int AudioChannels { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of audio channels in the current instance.</summary>
        <value>A <see cref="T:System.Int32" /> representing the number of audio channels.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AudioSampleRate">
      <MemberSignature Language="C#" Value="public int AudioSampleRate { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the audio sample rate of the current instance.</summary>
        <value>A <see cref="T:System.Int32" /> representing the audio sample rate.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the duration of the current instance.</summary>
        <value>Always <see cref="F:System.TimeSpan.Zero" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MediaTypes">
      <MemberSignature Language="C#" Value="public TagLib.MediaTypes MediaTypes { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.MediaTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the media types contained in the current instance.</summary>
        <value>Always <see cref="F:TagLib.MediaTypes.Audio" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TagLib.Riff.WaveFormatEx other);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TagLib.Riff.WaveFormatEx" />
      </Parameters>
      <Docs>
        <param name="other">A <see cref="T:TagLib.Riff.WaveFormatEx" /> to compare to the current instance.</param>
        <summary>Compares the current instance to another WaveFormatEx structure to determine if they are equal to eachother.</summary>
        <returns>
          <see langword="true" /> if they are equal. Otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (TagLib.Riff.WaveFormatEx first, TagLib.Riff.WaveFormatEx second);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="TagLib.Riff.WaveFormatEx" />
        <Parameter Name="second" Type="TagLib.Riff.WaveFormatEx" />
      </Parameters>
      <Docs>
        <param name="first">The first <see cref="T:TagLib.Riff.WaveFormatEx" /> to compare.</param>
        <param name="second">The second <see cref="T:TagLib.Riff.WaveFormatEx" /> to compare.</param>
        <summary>Compares two WaveFormatEx structures to determine if they are equal to eachother.</summary>
        <returns>
          <see langword="true" /> if they are equal. Otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (TagLib.Riff.WaveFormatEx first, TagLib.Riff.WaveFormatEx second);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="TagLib.Riff.WaveFormatEx" />
        <Parameter Name="second" Type="TagLib.Riff.WaveFormatEx" />
      </Parameters>
      <Docs>
        <param name="first">The first <see cref="T:TagLib.Riff.WaveFormatEx" /> to compare.</param>
        <param name="second">The second <see cref="T:TagLib.Riff.WaveFormatEx" /> to compare.</param>
        <summary>Compares two WaveFormatEx structures to determine if they are unequal to eachother.</summary>
        <returns>
          <see langword="true" /> if they are unequal. Otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>This class is used to access a Microsoft WaveFormatEx structure, and provides <see cref="T:TagLib.IAudioCodec" /> support for it.</summary>
    <remarks />
  </Docs>
</Type>
