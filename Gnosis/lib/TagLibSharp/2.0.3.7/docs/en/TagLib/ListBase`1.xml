<Type Name="ListBase&lt;T&gt;" FullName="TagLib.ListBase&lt;T&gt;">
  <TypeSignature Language="C#" Value="public class ListBase&lt;T&gt; : System.Collections.Generic.IList&lt;T&gt;" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter>T</TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;T&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Reflection.DefaultMember("Item")</AttributeName>
    </Attribute>
  </Attributes>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListBase ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.ListBase&lt;T&gt;" /> with no contents.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListBase (TagLib.ListBase&lt;T&gt; list);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="list" Type="TagLib.ListBase&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="list">A <see cref="T:TagLib.ListBase&lt;T&gt;" /> to copy values from.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.ListBase&lt;T&gt;" /> by copying values from a T collection.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListBase (T[] list);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="list" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="list">An item array to copy values from.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.ListBase&lt;T&gt;" /> by copying values from a T collection.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TagLib.ListBase&lt;T&gt; list);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="TagLib.ListBase&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="list">A <see cref="T:TagLib.ListBase&lt;T&gt;" /> to copy values from.</param>
        <summary>Adds elements of another instance to the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T[] list);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="T[]" />
      </Parameters>
      <Docs>
        <param name="list">An item array to copy values from.</param>
        <summary>Adds elements of an array to the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SortedInsert">
      <MemberSignature Language="C#" Value="public virtual void SortedInsert (T item, bool unique);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
        <Parameter Name="unique" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="item">An item to insert into the current instance.</param>
        <param name="unique">A <see cref="T:System.Boolean" /> specifying whether or the element should be inserted if an equal is found.</param>
        <summary>Inserts an element into the current instance in sorted order, optionally not adding it if an equal is found.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SortedInsert">
      <MemberSignature Language="C#" Value="public void SortedInsert (T item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">An item to add to the current instance.</param>
        <summary>Inserts an element into the current instance in sorted order.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToArray">
      <MemberSignature Language="C#" Value="public T[] ToArray ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the current instance to an array.</summary>
        <returns>An item array containing all the values from the current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (T item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">An item to add to the current instance.</param>
        <summary>Adds a single value to the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all values from the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (T item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">An item to search for in the current instance.</param>
        <summary>Checks whether or not the current instance contains a value.</summary>
        <returns>A <see cref="T:System.Boolean" /> representing whether or not the current instance contains a value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (T item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">An item to search for in the current instance.</param>
        <summary>Finds the first matching value in the current instance and returns its index.</summary>
        <returns>A <see cref="T:System.Int32" /> specifying the index at which the value was found, or -1 if not found.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, T item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="T:System.Int32" /> specifying the index a which to insert the value.</param>
        <param name="item">An item to insert into the current instance.</param>
        <summary>Inserts a value into the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (T item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="T" />
      </Parameters>
      <Docs>
        <param name="item">An item to remove from the current instance.</param>
        <summary>Removes the first instance of a value from the current instance.</summary>
        <returns>A <see cref="T:System.Boolean" /> specifying whether or not the value was found and removed from the current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="T:System.Int32" /> to remove from the current instance.</param>
        <summary>Removes a value from the current instance at a specified index.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (string separator);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="separator" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="separator">A <see cref="T:System.String" /> to use to separate the values.</param>
        <summary>Converts the current instance into a string, separating the values with a specified separator.</summary>
        <returns>A <see cref="T:System.String" /> containing all the values in the current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (T[] array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">An array to copy the values to.</param>
        <param name="arrayIndex">A <see cref="T:System.Int32" /> specifying the index in the destination at which to start copying.</param>
        <summary>Copies values from the current instance to an array.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;T&gt; GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;T&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a <see cref="T:System.Collections.Generic.IEnumerator&lt;T&gt;" /> for the current instance.</summary>
        <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerator&lt;T&gt;" /> for the current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Checks whether or not the current instance contains any values.</summary>
        <value>
          <see langword="true" /> if the current instance is empty, otherwise <see langword="false" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether or not the current instance is read only.</summary>
        <value>Always <see langref="false" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public bool IsFixedSize { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether or not the current instance is fixed size.</summary>
        <value>Always <see langref="false" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of elements in the current instance.</summary>
        <value>A <see cref="T:System.Int32" /> containing the number of elements in the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether or not the current instance is synchronized.</summary>
        <value>Always <see langref="false" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets an object that can be used to synchronize access to the current instance.</para>
        </summary>
        <value>
          <para>A <see cref="T:System.Object" /> that can be used to synchronize access to the current instance.</para>
        </value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public T this[int index] { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="T:System.Int32" /> specifying the index to read and write from.</param>
        <summary>Gets or sets the element at the specified index of the current instance.</summary>
        <value>The item at the specified index of the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Collections.Generic.IEnumerable&lt;T&gt; list);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="list" Type="System.Collections.Generic.IEnumerable&lt;T&gt;" />
      </Parameters>
      <Docs>
        <param name="list">A <see cref="T:System.Collections.Generic.IEnumerable&lt;T&gt;" /> whose elements are be appended to the current instance.</param>
        <summary>Adds the elements from another <see cref="T:System.Collections.Generic.IEnumerable&lt;T&gt;" /> at the end of the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
  </Members>
  <Docs>
    <typeparam name="T">A type which implements <see cref="T:System.Collections.Generic.IComparable&lt;T&gt;" /></typeparam>
    <summary>This class represents and performs operations on variable length lists.</summary>
    <remarks />
  </Docs>
</Type>
