<Type Name="ByteVector" FullName="TagLib.ByteVector">
  <TypeSignature Language="C#" Value="public class ByteVector : IComparable&lt;TagLib.ByteVector&gt;, System.Collections.Generic.IList&lt;byte&gt;" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IList&lt;System.Byte&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable&lt;TagLib.ByteVector&gt;</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Reflection.DefaultMember("Item")</AttributeName>
    </Attribute>
  </Attributes>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ByteVector ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>
          <para>
            Constructs and initializes a new instance of the <see cref="T:TagLib.ByteVector" /> class that is empty.
          </para>
        </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ByteVector (int size, byte value);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="size">A <see cref="T:System.Int32" /> that specifies the number of bytes to be stored in the new instance.</param>
        <param name="value">A <see cref="T:System.Byte" /> that specifies the value to be stored in the new instance</param>
        <summary>
          <para>
            Constructs and initializes a new instance of the <see cref="T:TagLib.ByteVector" /> class of specified size containing bytes of specified value.
          </para>
        </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ByteVector (int size);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size">A <see cref="T:System.Int32" /> that specifies the number of bytes to be stored in the new instance.</param>
        <summary>
          <para>
            Constructs and initializes a new instance of the <see cref="T:TagLib.ByteVector" /> class of specified size containing bytes with a zeroed value.
          </para>
        </summary>
        <remarks>
          <para>
            Each element of the new instance will have a value of 0x00. <see cref="C:TagLib.ByteVector(System.Int32,System.Byte)" /> to fill a new instance with a specified value.
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ByteVector (TagLib.ByteVector vector);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="vector" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="vector">A <see cref="T:TagLib.ByteVector" /> containing the bytes to be stored in the new instance.</param>
        <summary>
          <para>
            Constructs and initializes a new instance of the <see cref="T:TagLib.ByteVector" /> class by copying the values from another instance.
          </para>
        </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ByteVector (byte[] data, int length);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:System.Byte" />[] containing the bytes to be copied to the new instance.</param>
        <param name="length">A <see cref="T:System.Int32" /> that specified the number of bytes to be copied to the new instance.</param>
        <summary>
          <para>
            Constructs and initializes a new instance of the <see cref="T:TagLib.ByteVector" /> class copying a specified number of elements from the beginning of a specified <see cref="T:System.Byte" />[].
          </para>
        </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ByteVector (byte[] data);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:System.Byte" />[] containing the bytes to be copied to the new instance.</param>
        <summary>
          <para>
            Constructs and initializes a new instance of the <see cref="T:TagLib.ByteVector" /> class copying the elements from a specified <see cref="T:System.Byte" />[].
          </para>
        </summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public TagLib.ByteVector Mid (int index, int length);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="T:System.Int32" /> that specifies the index at which to start copying elements from the current instance.</param>
        <param name="length">A <see cref="T:System.Int32" /> that specifies the number of elements to copy from the current instance.</param>
        <summary>
          <para>
            Creates a new instance of the <see cref="T:TagLib.ByteVector" /> class that contains a specified range of elements from the current instance.
          </para>
        </summary>
        <returns>A <see cref="T:TagLib.ByteVector" /> containing the specified number of elements starting at the specified index. If the specified length is greater than the number of available elements, the number of available elements will be stored. If the specified length is less than or equal to zero, an empty instance will be returned.</returns>
        <remarks />
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> &lt; 0
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> &gt; <see cref="P:TagLib.ByteVector.Count" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Mid">
      <MemberSignature Language="C#" Value="public TagLib.ByteVector Mid (int index);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="T:System.Int32" /> that specifies the index at which to start copying elements from the current instance.</param>
        <summary>
          <para>
            Creates a new instance of the <see cref="T:TagLib.ByteVector" /> class that contains all the elements from the current instance starting at a specified index.
          </para>
        </summary>
        <returns>A <see cref="T:TagLib.ByteVector" /> containing the all of elements starting at the specified index.</returns>
        <remarks />
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> &lt; 0
        </exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="index" /> &gt; <see cref="P:TagLib.ByteVector.Count" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (TagLib.ByteVector pattern, int offset, int byteAlign);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="byteAlign" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <param name="offset">A <see cref="T:System.Int32" /> specifying the index at which to begin the search.</param>
        <param name="byteAlign">A <see cref="T:System.Int32" /> specifying the byte alignment to use when searching.</param>
        <summary>Searches the current instance for a <see cref="T:TagLib.ByteVector" /> pattern, starting at a specified offset, with a specified byte alignment.</summary>
        <returns>A <see cref="System.Int32" /> containing either the index at which the value was found or -1 if it was not found. The value will be divisible by <paramref name="byte_align" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (TagLib.ByteVector pattern, int offset);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <param name="offset">A <see cref="T:System.Int32" /> specifying the index at which to begin the search.</param>
        <summary>Searches the current instance for a <see cref="T:TagLib.ByteVector" /> pattern, starting at a specified offset.</summary>
        <returns>A <see cref="System.Int32" /> containing either the index at which the value was found or -1 if it was not found.</returns>
        <remarks>This search operates with a byte alignment of 1. That is, the pattern can start at any index starting at <paramref name="offset" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public int Find (TagLib.ByteVector pattern);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <summary>Searches the current instance for a <see cref="T:TagLib.ByteVector" /> pattern, starting at the beginning.</summary>
        <returns>A <see cref="System.Int32" /> containing either the index at which the value was found or -1 if it was not found.</returns>
        <remarks>This search operates with a byte alignment of 1. That is, the pattern can start at any index starting at <paramref name="offset" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RFind">
      <MemberSignature Language="C#" Value="public int RFind (TagLib.ByteVector pattern, int offset, int byteAlign);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="byteAlign" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <param name="offset">A <see cref="T:System.Int32" /> specifying the index at which to begin the search.</param>
        <param name="byteAlign">A <see cref="T:System.Int32" /> specifying the byte alignment to use when searching.</param>
        <summary>Searches backwards through the current instance for a <see cref="T:TagLib.ByteVector" /> pattern, starting at a specified offset, with a specified byte alignment.</summary>
        <returns>A <see cref="System.Int32" /> containing either the index at which the value was found or -1 if it was not found. The value will be divisible by <paramref name="byte_align" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RFind">
      <MemberSignature Language="C#" Value="public int RFind (TagLib.ByteVector pattern, int offset);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <param name="offset">A <see cref="T:System.Int32" /> specifying the index at which to begin the search.</param>
        <summary>Searches backwards through the current instance for a <see cref="T:TagLib.ByteVector" /> pattern, starting at a specified offset.</summary>
        <returns>A <see cref="System.Int32" /> containing either the index at which the value was found or -1 if it was not found.</returns>
        <remarks>This search operates with a byte alignment of 1. That is, the pattern can start at any index starting at <paramref name="offset" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RFind">
      <MemberSignature Language="C#" Value="public int RFind (TagLib.ByteVector pattern);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <summary>Searches backwards through the current instance for a <see cref="T:TagLib.ByteVector" /> pattern, starting at the beginning.</summary>
        <returns>A <see cref="System.Int32" /> containing either the index at which the value was found or -1 if it was not found.</returns>
        <remarks>This search operates with a byte alignment of 1. That is, the pattern can start at any index starting at <paramref name="offset" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsAt">
      <MemberSignature Language="C#" Value="public bool ContainsAt (TagLib.ByteVector pattern, int offset, int patternOffset, int patternLength);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="patternOffset" Type="System.Int32" />
        <Parameter Name="patternLength" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <param name="offset">A <see cref="T:System.Int32" /> specifying the location within the current instance at which to check.</param>
        <param name="patternOffset">A <see cref="T:System.Int32" /> specifying where in <paramref name="pattern" /> the pattern to match begins.</param>
        <param name="patternLength">A <see cref="T:System.Int32" /> specifying the number of bytes in the pattern to match.</param>
        <summary>Checks the current instance to determine whether it contains a specified portion of another <see cref="T:TagLib.ByteVector" /> at a specified offset.</summary>
        <returns>
          <see langword="true" /> if the portion of the pattern if found at the specified offset, otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ContainsAt">
      <MemberSignature Language="C#" Value="public bool ContainsAt (TagLib.ByteVector pattern, int offset, int patternOffset);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="patternOffset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <param name="offset">A <see cref="T:System.Int32" /> specifying the location within the current instance at which to check.</param>
        <param name="patternOffset">A <see cref="T:System.Int32" /> specifying where in <paramref name="pattern" /> the pattern to match begins.</param>
        <summary>Checks the current instance to determine whether it contains a specified portion of another <see cref="T:TagLib.ByteVector" /> at a specified offset.</summary>
        <returns>
          <see langword="true" /> if the portion of the pattern if found at the specified offset, otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ContainsAt">
      <MemberSignature Language="C#" Value="public bool ContainsAt (TagLib.ByteVector pattern, int offset);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <param name="offset">A <see cref="T:System.Int32" /> specifying the location within the current instance at which to check.</param>
        <summary>Checks the current instance to determine whether it contains a <see cref="T:TagLib.ByteVector" /> pattern at a specified offset.</summary>
        <returns>
          <see langword="true" /> if the pattern if found at the specified offset, otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="StartsWith">
      <MemberSignature Language="C#" Value="public bool StartsWith (TagLib.ByteVector pattern);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <summary>Checks whether the current instance starts with a specified pattern.</summary>
        <returns>
          <see langword="true" /> if the current instance starts with the pattern, otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="EndsWith">
      <MemberSignature Language="C#" Value="public bool EndsWith (TagLib.ByteVector pattern);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <summary>Checks whether the current instance ends with a specified pattern.</summary>
        <returns>
          <see langword="true" /> if the current instance ends with the pattern, otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="EndsWithPartialMatch">
      <MemberSignature Language="C#" Value="public int EndsWithPartialMatch (TagLib.ByteVector pattern);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing the pattern to be found in the current instance.</param>
        <summary>Checks whether the current instance ends with either all of part of a specified pattern.</summary>
        <returns>Returns the index at which the partial pattern was found, otherwise -1.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (TagLib.ByteVector vector);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="vector">A <see cref="T:TagLib.ByteVector" /> whose elements are be appended to the current instance.</param>
        <summary>Adds the elements from another <see cref="T:TagLib.ByteVector" /> at the end of the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (byte[] vector);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="vector">A <see cref="T:System.Byte" />[] whose elements are be appended to the current instance.</param>
        <summary>Adds the elements from a <see cref="T:System.Byte" />[] at the end of the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, TagLib.ByteVector vector);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="vector" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="System.Int32" /> specifying the index at which to insert elements.</param>
        <param name="vector">A <see cref="T:TagLib.ByteVector" /> whose elements are be inserted into the current instance.</param>
        <summary>Inserts the elements from a <see cref="T:TagLib.ByteVector" /> into the current instance at a specified index.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, byte[] vector);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="vector" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="System.Int32" /> specifying the index at which to insert elements.</param>
        <param name="vector">A <see cref="T:System.Byte" />[] whose elements are be inserted into the current instance.</param>
        <summary>Inserts the elements from a <see cref="T:TagLib.ByteVector" /> into the current instance at a specified index.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public TagLib.ByteVector Resize (int size, byte padding);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="padding" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="size">A <see cref="T:TagLib.ByteVector" /> specifying what size to resize the current instance to.</param>
        <param name="padding">A <see cref="T:System.Byte" /> to be stored in any extra space created by the resize.</param>
        <summary>Resizes the current instance to a specified size, filling newly created values with a specified byte.</summary>
        <returns>The current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public TagLib.ByteVector Resize (int size);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="size">A <see cref="T:TagLib.ByteVector" /> specifying what size to resize the current instance to.</param>
        <summary>Resizes the current instance to a specified size, filling newly created values with zeros.</summary>
        <returns>The current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToUInt">
      <MemberSignature Language="C#" Value="public uint ToUInt (bool mostSignificantByteFirst);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mostSignificantByteFirst" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mostSignificantByteFirst">A <see cref="T:System.Boolean" /> specifying whether or not the most significant byte is first.</param>
        <summary>Converts the first four bytes of the current instance to a <see cref="T:System.UInt32" />.</summary>
        <returns>A <see cref="T:System.UInt32" /> representing the data.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToUInt">
      <MemberSignature Language="C#" Value="public uint ToUInt ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the first four bytes of the current instance to a <see cref="T:System.UInt32" /> with the most significant byte first.</summary>
        <returns>A <see cref="T:System.UInt32" /> representing the data.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (TagLib.StringType type, int offset);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TagLib.StringType" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="T:TagLib.StringType" /> specifying the string encoding to use.</param>
        <param name="offset">A <See cref="T:System.Int32" /> specifying the first offset to start converting at.</param>
        <summary>Converts the current instance into a <see cref="T:System.String" /> using a specified encoding.</summary>
        <returns>A <see cref="T:System.String" /> converted from the current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString (TagLib.StringType type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TagLib.StringType" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="T:TagLib.StringType" /> specifying the string encoding to use.</param>
        <summary>Converts the current instance into a <see cref="T:System.String" /> using a specified encoding.</summary>
        <returns>A <see cref="T:System.String" /> converted from the current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToStrings">
      <MemberSignature Language="C#" Value="public string[] ToStrings (TagLib.StringType type, int offset);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TagLib.StringType" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="T:TagLib.StringType" /> specifying the string encoding to use.</param>
        <param name="offset">A <See cref="T:System.Int32" /> specifying the first offset to start converting at.</param>
        <summary>Converts the current instance into an array of <see cref="T:System.String" /> using a specified encoding, assuming the values are nil separated.</summary>
        <returns>A <see cref="T:System.String" /> array converted from the current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToStrings">
      <MemberSignature Language="C#" Value="public string[] ToStrings (TagLib.StringType type, int offset, int count);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TagLib.StringType" />
        <Parameter Name="offset" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="T:TagLib.StringType" /> specifying the string encoding to use.</param>
        <param name="offset">A <See cref="T:System.Int32" /> specifying the first offset to start converting at.</param>
        <param name="count">A <see cref="T:System.Int32" /> specifying a limit to the number of string to create. Once the limit has been reached, the last string will be filled by the remainder of the data.</param>
        <summary>Converts the current instance into an array of <see cref="T:System.String" /> using a specified encoding, assuming the values are nil separated.</summary>
        <returns>A <see cref="T:System.String" /> array converted from the current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromUInt">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromUInt (uint value, bool mostSignificantByteFirst);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
        <Parameter Name="mostSignificantByteFirst" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.UInt32" /> to be converted.</param>
        <param name="mostSignificantByteFirst">A <see cref="T:System.Boolean" /> specifying whether or not the most significant byte appears first.</param>
        <summary>Converts a <see cref="T:System.UInt32" /> into a four byte <see cref="T:TagLib.ByteVector" />.</summary>
        <returns>A four byte <see cref="T:TagLib.ByteVector" /> representing the converted value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromUInt">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromUInt (uint value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.UInt32" /> to be converted.</param>
        <summary>Converts a <see cref="T:System.UInt32" /> into a four byte <see cref="T:TagLib.ByteVector" /> with the most significant byte first.</summary>
        <returns>A four byte <see cref="T:TagLib.ByteVector" /> representing the converted value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromString">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromString (string text, TagLib.StringType type, int length);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="TagLib.StringType" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">A <see cref="T:System.String" /> containing text to convert.</param>
        <param name="type">A <see cref="T:TagLib.StringType" /> specifying the encoding to use when converting the string.</param>
        <param name="length">A <see cref="T:System.Int32" /> specifying the number of characters to convert.</param>
        <summary>Creates a new instance of <see cref="T:TagLib.ByteVector" /> by converting a <see cref="T:System.String" /> into a specified encoding.</summary>
        <returns>A new <see cref="T:TagLib.ByteVector" /> containing the string data in the specified encoding.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromString">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromString (string text, TagLib.StringType type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="type" Type="TagLib.StringType" />
      </Parameters>
      <Docs>
        <param name="text">A <see cref="T:System.String" /> containing text to convert.</param>
        <param name="type">A <see cref="T:TagLib.StringType" /> specifying the encoding to use when converting the string.</param>
        <summary>Creates a new instance of <see cref="T:TagLib.ByteVector" /> by converting a <see cref="T:System.String" /> into a specified encoding.</summary>
        <returns>A new <see cref="T:TagLib.ByteVector" /> containing the string data in the specified encoding.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromString">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromString (string text, int length);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="text">A <see cref="T:System.String" /> containing text to convert.</param>
        <param name="length">A <see cref="T:System.Int32" /> specifying the number of characters to convert.</param>
        <summary>Creates a new instance of <see cref="T:TagLib.ByteVector" /> by converting a <see cref="T:System.String" /> into UTF-8 encoding.</summary>
        <returns>A new <see cref="T:TagLib.ByteVector" /> containing the string data in UTF-8 encoding.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromString">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromString (string text);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">A <see cref="T:System.String" /> containing text to convert.</param>
        <summary>Creates a new instance of <see cref="T:TagLib.ByteVector" /> by converting a <see cref="T:System.String" /> into UTF-8 encoding.</summary>
        <returns>A new <see cref="T:TagLib.ByteVector" /> containing the string data in UTF-8 encoding.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromStream">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromStream (System.IO.Stream stream);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">A <see cref="T:System.IO.Stream" /> to be read.</param>
        <summary>Creates a new <see cref="T:TagLib.ByteVector" /> by reading it from a specified stream.</summary>
        <returns>A <see cref="T:TagLib.ByteVector" /> containing the contents of <value name="stream" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CompareTo">
      <MemberSignature Language="C#" Value="public int CompareTo (TagLib.ByteVector other);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="other">A <see cref="T:TagLib.ByteVector" /> to compare to the current instance.</param>
        <summary>Compares the current instance to another instance.</summary>
        <returns>A <see cref="T:System.Int32" /> less than, greater than, or equal to zero representing whether or not the current instance is less than, greater than, or equal to the other instance.</returns>
        <remarks>This is analogous to the standard C <c>strcmp</c>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerator&lt;byte&gt; GetEnumerator ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerator&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a <see cref="T:System.Collections.Generic.IEnumerator&lt;System.Byte&gt;" /> for the current instance.</summary>
        <returns>Returns a <see cref="T:System.Collections.Generic.IEnumerator&lt;System.Byte&gt;" /> for the current instance.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all the contents of the current instance, making its size zero.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (byte item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="item">A <see cref="T:System.Byte" /> to add to the current instance.</param>
        <summary>Adds a single byte to the end of the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public bool Remove (byte item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="item">A <see cref="T:System.Byte" /> to remove from the current instance.</param>
        <summary>Removes the first instance of a byte from the current instance.</summary>
        <returns>
          <see langword="true" /> if the byte was found and removed. Otherwise, <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (byte[] array, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="array" Type="System.Byte[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="array">A <see cref="T:System.Byte" /> array to copy values to.</param>
        <param name="arrayIndex">A <see cref="T:System.Int32" /> specifying at what byte in the destination array to start copying.</param>
        <summary>Copies elements from the current instance to a specified <see cref="T:System.Byte" /> array.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (byte item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="item">A <see cref="T:System.Byte" /> to check for in the current instance.</param>
        <summary>Checks whether or not a specified byte exists in the current instance.</summary>
        <returns>A <see cref="T:System.Boolean" /> representing whether or not the value was found.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="T:System.Int32" /> specifying at what index to remove a byte.</param>
        <summary>Removes a single byte from the current instance at a specified index.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, byte item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="T:System.Int32" /> specifying at what index to add a single byte.</param>
        <param name="item">A <see cref="T:System.Byte" /> to insert into the current instance.</param>
        <summary>Inserts a single byte into the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (byte item);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="item">A <see cref="T:System.Byte" /> to find in the current instance.</param>
        <summary>Finds the first index of a single byte in the current instance.</summary>
        <returns>A <see cref="T:System.Int32" /> containing the index at which the value was found, or -1 if it was not found.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (TagLib.ByteVector first, TagLib.ByteVector second);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="TagLib.ByteVector" />
        <Parameter Name="second" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="first">The first <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <param name="second">The second <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <summary>Returns a <see cref="T:System.Boolean" /> value indicating whether the two specified values are equal to each other.</summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="a" /> and <paramref name="b" /> represent the same value; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (TagLib.ByteVector first, TagLib.ByteVector second);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="TagLib.ByteVector" />
        <Parameter Name="second" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="first">The first <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <param name="second">The second <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <summary>Returns a <see cref="T:System.Boolean" /> value indicating whether the two specified values are unequal to each other.</summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="a" /> and <paramref name="b" /> represent different values; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_LessThan">
      <MemberSignature Language="C#" Value="public static bool op_LessThan (TagLib.ByteVector first, TagLib.ByteVector second);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="TagLib.ByteVector" />
        <Parameter Name="second" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="first">The first <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <param name="second">The second <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <summary>Returns a <see cref="T:System.Boolean" /> value indicating whether the the first value is less than the second.</summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="a" /> is less than <paramref name="b" />; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_LessThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_LessThanOrEqual (TagLib.ByteVector first, TagLib.ByteVector second);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="TagLib.ByteVector" />
        <Parameter Name="second" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="first">The first <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <param name="second">The second <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <summary>Returns a <see cref="T:System.Boolean" /> value indicating whether the the first value is less than or equal to the second.</summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="a" /> is less than or equal to <paramref name="b" />; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThan">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThan (TagLib.ByteVector first, TagLib.ByteVector second);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="TagLib.ByteVector" />
        <Parameter Name="second" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="first">The first <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <param name="second">The second <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <summary>Returns a <see cref="T:System.Boolean" /> value indicating whether the the first value is greater than the second.</summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="a" /> is greater than <paramref name="b" />; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_GreaterThanOrEqual">
      <MemberSignature Language="C#" Value="public static bool op_GreaterThanOrEqual (TagLib.ByteVector first, TagLib.ByteVector second);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="TagLib.ByteVector" />
        <Parameter Name="second" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="first">The first <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <param name="second">The second <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <summary>Returns a <see cref="T:System.Boolean" /> value indicating whether the the first value is greater than or equal to the second.</summary>
        <returns>
          <para>
            <see langword="true" /> if <paramref name="a" /> is greater than or equal to <paramref name="b" />; otherwise, <see langword="false" />.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Addition">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector op_Addition (TagLib.ByteVector first, TagLib.ByteVector second);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="TagLib.ByteVector" />
        <Parameter Name="second" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="first">The first <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <param name="second">The second <see cref="T:TagLib.ByteVector" /> to compare.</param>
        <summary>Adds two instances of <see cref="T:TagLib.ByteVector" /> together.</summary>
        <returns>
          <para>A new instance of <see cref="T:TagLib.ByteVector" /> containing all of the elements of <paramref name="a" /> followed by all the elements of <paramref name="b" />.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector op_Implicit (byte value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.Byte" /> to convert.</param>
        <summary>Converts a <see cref="T:Sytem.Byte" /> to a new instance of <see cref="T:TagLib.ByteVector" />.</summary>
        <returns>A new instance of <see cref="T:TagLib.ByteVector" /> containing the original value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector op_Implicit (byte[] value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.Byte" /> array to convert.</param>
        <summary>Converts a <see cref="T:Sytem.Byte" /> array to a new instance of <see cref="T:TagLib.ByteVector" />.</summary>
        <returns>A new instance of <see cref="T:TagLib.ByteVector" /> containing the original value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Implicit">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector op_Implicit (string value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.String" /> to convert.</param>
        <summary>Converts a <see cref="T:Sytem.String" /> to a new instance of <see cref="T:TagLib.ByteVector" />.</summary>
        <returns>A new instance of <see cref="T:TagLib.ByteVector" /> containing the original value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public byte[] Data { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data stored in the current instance.</summary>
        <value>A <see cref="T:System.Byte" /> array containing the data stored in the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsEmpty">
      <MemberSignature Language="C#" Value="public bool IsEmpty { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether or not the current instance is empty.</summary>
        <value>A <see cref="T:System.Boolean" /> specifying whether or not the current instance has data.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of bytes in the current instance.</summary>
        <value>A <see cref="T:System.Int32" /> representing the number of bytes in the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsSynchronized">
      <MemberSignature Language="C#" Value="public bool IsSynchronized { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets a value indicating whether access to the current instance is synchronized (thread-safe).</para>
        </summary>
        <value>Always <see langword="false" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SyncRoot">
      <MemberSignature Language="C#" Value="public object SyncRoot { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <para>Gets an object that can be used to synchronize access to the current instance.</para>
        </summary>
        <value>
          <para>A <see cref="T:System.Object" /> that can be used to synchronize access to the current instance.</para>
        </value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public virtual bool IsReadOnly { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether or not the current instance is readonly.</summary>
        <value>Always <see langword="true" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IsFixedSize">
      <MemberSignature Language="C#" Value="public virtual bool IsFixedSize { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether or not the current instance has a fixed size.</summary>
        <value>Always <see langword="true" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public byte this[int index] { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Byte</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="T:System.Int32" /> specifying the index to read and write from.</param>
        <summary>Gets or sets the element at the specified index of the current instance.</summary>
        <value>The <see cref="T:System.Byte" /> at the specified index of the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToUShort">
      <MemberSignature Language="C#" Value="public ushort ToUShort (bool mostSignificantByteFirst);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mostSignificantByteFirst" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mostSignificantByteFirst">A <see cref="T:System.Boolean" /> specifying whether or not the most significant byte is first.</param>
        <summary>Converts the first two bytes of the current instance to a <see cref="T:System.UInt16" />.</summary>
        <returns>A <see cref="T:System.UInt16" /> representing the data.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToUShort">
      <MemberSignature Language="C#" Value="public ushort ToUShort ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the first two bytes of the current instance to a <see cref="T:System.UInt16" /> with the most significant byte first.</summary>
        <returns>A <see cref="T:System.UInt16" /> representing the data.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToULong">
      <MemberSignature Language="C#" Value="public ulong ToULong (bool mostSignificantByteFirst);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mostSignificantByteFirst" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mostSignificantByteFirst">A <see cref="T:System.Boolean" /> specifying whether or not the most significant byte is first.</param>
        <summary>Converts the first eight bytes of the current instance to a <see cref="T:System.UInt64" />.</summary>
        <returns>A <see cref="T:System.UInt64" /> representing the data.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ToULong">
      <MemberSignature Language="C#" Value="public ulong ToULong ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Converts the first eight bytes of the current instance to a <see cref="T:System.UInt64" /> with the most significant byte first.</summary>
        <returns>A <see cref="T:System.UInt64" /> representing the data.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromUShort">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromUShort (ushort value, bool mostSignificantByteFirst);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
        <Parameter Name="mostSignificantByteFirst" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.UInt16" /> to be converted.</param>
        <param name="mostSignificantByteFirst">A <see cref="T:System.Boolean" /> specifying whether or not the most significant byte appears first.</param>
        <summary>Converts a <see cref="T:System.UInt16" /> into a two byte <see cref="T:TagLib.ByteVector" />.</summary>
        <returns>A two byte <see cref="T:TagLib.ByteVector" /> representing the converted value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromUShort">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromUShort (ushort value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt16" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.UInt16" /> to be converted.</param>
        <summary>Converts a <see cref="T:System.UInt16" /> into a two byte <see cref="T:TagLib.ByteVector" /> with the most significant byte first.</summary>
        <returns>A two byte <see cref="T:TagLib.ByteVector" /> representing the converted value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromULong">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromULong (ulong value, bool mostSignificantByteFirst);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
        <Parameter Name="mostSignificantByteFirst" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.UInt64" /> to be converted.</param>
        <param name="mostSignificantByteFirst">A <see cref="T:System.Boolean" /> specifying whether or not the most significant byte appears first.</param>
        <summary>Converts a <see cref="T:System.UInt64" /> into a eight byte <see cref="T:TagLib.ByteVector" />.</summary>
        <returns>A eight byte <see cref="T:TagLib.ByteVector" /> representing the converted value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromULong">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromULong (ulong value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.UInt64" /> to be converted.</param>
        <summary>Converts a <see cref="T:System.UInt64" /> into a eight byte <see cref="T:TagLib.ByteVector" /> with the most significant byte first.</summary>
        <returns>A eight byte <see cref="T:TagLib.ByteVector" /> representing the converted value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveRange">
      <MemberSignature Language="C#" Value="public void RemoveRange (int index, int count);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">A <see cref="T:System.Int32" /> specifying at what index to start removing data.</param>
        <param name="count">A <see cref="T:System.Int32" /> specifying the number of bytes to remove.</param>
        <summary>Removes a portion of data from the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Checksum">
      <MemberSignature Language="C#" Value="public uint Checksum { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the CRC-32 checksum of the current instance.</summary>
        <value>A <see cref="T:System.Int32" /> containing the CRC-32 checksum of the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TagLib.ByteVector other);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="other">A <see cref="T:TagLib.ByteVector" /> to compare to the current instance.</param>
        <summary>Compares another <see cref="T:TagLib.ByteVector" /> to the current instance.</summary>
        <returns>
          <see langword="true" /> if the two values are equal. Otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromFile">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromFile (TagLib.File.IFileAbstraction abstraction);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="abstraction" Type="TagLib.File+IFileAbstraction" />
      </Parameters>
      <Docs>
        <param name="abstraction">A <see cref="T:TagLib.File+IFileAbstraction" /> to read from.</param>
        <summary>Creates a new instance of <see cref="T:TagLib.ByteVector" /> by reading the contents of a file.</summary>
        <returns>A new <see cref="T:TagLib.ByteVector" /> containing the contents of the file.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromPath">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromPath (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">A <see cref="T:System.String" /> containing the name of a file to read from.</param>
        <summary>Creates a new instance of <see cref="T:TagLib.ByteVector" /> by reading the contents of a file.</summary>
        <returns>A new <see cref="T:TagLib.ByteVector" /> containing the contents of the file.</returns>
        <remarks />
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>This class represents and performs operations on variable length list of <see cref="T:System.Byte" /> elements.</summary>
    <remarks />
  </Docs>
</Type>
