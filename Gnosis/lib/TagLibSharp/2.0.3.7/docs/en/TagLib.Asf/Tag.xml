<Type Name="Tag" FullName="TagLib.Asf.Tag">
  <TypeSignature Language="C#" Value="public class Tag : TagLib.Tag" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>TagLib.Tag</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tag ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.Asf.Tag" /> with no contents.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tag (TagLib.Asf.HeaderObject header);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="header" Type="TagLib.Asf.HeaderObject" />
      </Parameters>
      <Docs>
        <param name="header">A <see cref="T:TagLib.Asf.HeaderObject" /> to get tagging information from.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.Asf.Tag" /> using tagging information from a <see cref="T:TagLib.Asf.HeaderObject" />.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveDescriptors">
      <MemberSignature Language="C#" Value="public void RemoveDescriptors (string name);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">A <see cref="T:System.String" /> containing a descriptor name.</param>
        <summary>Removes all <see cref="T:TagLib.Asf.ContentDescriptor" />s from the current instance that have a specific name.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetDescriptors">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;TagLib.Asf.ContentDescriptor&gt; GetDescriptors (string[] names);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TagLib.Asf.ContentDescriptor&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names">A <see cref="T:System.String" /> array containing a collection of descriptor names.</param>
        <summary>Gets all <see cref="T:TagLib.Asf.ContentDescriptor" />s in the current instance that match any of a collection of names.</summary>
        <returns>A <see cref="T:System.Collections.Generic.IEnumerable&lt;TagLib.Asf.ContentDescriptor&gt;" /> containing matching descriptors.</returns>
        <remarks>Multiple names are accepted because some descriptors have multiple name possibilities. For example, to access mood, <c>object.GetDescriptors ("WM/Mood", "Mood")</c> would be appropriate. Also, order does not matter and <c>object.GetDescriptors ("Mood", "WM/Mood")</c> will yield the same results.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDescriptors">
      <MemberSignature Language="C#" Value="public void SetDescriptors (string name, TagLib.Asf.ContentDescriptor[] descriptors);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="descriptors" Type="TagLib.Asf.ContentDescriptor[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">A <see cref="T:System.String" /> containing a descriptor name.</param>
        <param name="descriptors">A <see cref="T:TagLib.Asf.ContentDescriptor" /> to array to be added to the current instance.</param>
        <summary>Stores a collection of <see cref="T:TagLib.Asf.ContentDescriptor" />s in the current instance, replacing any original values.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddDescriptor">
      <MemberSignature Language="C#" Value="public void AddDescriptor (TagLib.Asf.ContentDescriptor descriptor);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="TagLib.Asf.ContentDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">A <see cref="T:TagLib.Asf.ContentDescriptor" /> to add to the current instance.</param>
        <summary>Adds a <see cref="T:TagLib.Asf.ContentDescriptor" /> to the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetDescriptorString">
      <MemberSignature Language="C#" Value="public string GetDescriptorString (string[] names);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names">A <see cref="T:System.String" /> array containing a collection of descriptor names.</param>
        <summary>Gets the text value of the first <see cref="T:TagLib.Asf.ContentDescriptor" /> in the current instance that matchs any of a collection of names.</summary>
        <returns>A <see cref="T:System.String" /> containing the text of the first matching descriptor.</returns>
        <remarks>Multiple names are accepted because some descriptors have multiple name possibilities. For example, to access mood, <c>object.GetDescriptorString ("WM/Mood", "Mood")</c> would be appropriate. Also, order does not matter and <c>object.GetDescriptorString ("Mood", "WM/Mood")</c> will yield the same results.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDescriptorString">
      <MemberSignature Language="C#" Value="public void SetDescriptorString (string value, string[] names);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.String" /> containing a value to store.</param>
        <param name="names">A <see cref="T:System.String" /> array containing a collection of descriptor names.</param>
        <summary>Stores a string value in a descriptor with the first name and removes all descriptors with other names.</summary>
        <remarks>As some descriptors have multiple name possibilities, it is important to remove the contents in other names when when storing a value a specific name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentDescriptionObject">
      <MemberSignature Language="C#" Value="public TagLib.Asf.ContentDescriptionObject ContentDescriptionObject { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Asf.ContentDescriptionObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:TagLib.Asf.ContentDescriptionObject" /> used by the current instance.</summary>
        <value>A <see cref="T:TagLib.Asf.ContentDescriptionObject" /> used by the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ExtendedContentDescriptionObject">
      <MemberSignature Language="C#" Value="public TagLib.Asf.ExtendedContentDescriptionObject ExtendedContentDescriptionObject { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Asf.ExtendedContentDescriptionObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:TagLib.Asf.ExtendedContentDescriptionObject" /> used by the current instance.</summary>
        <value>A <see cref="T:TagLib.Asf.ExtendedContentDescriptionObject" /> used by the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetDescriptorStrings">
      <MemberSignature Language="C#" Value="public string[] GetDescriptorStrings (string[] names);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="names">A <see cref="T:System.String" /> array containing a collection of descriptor names.</param>
        <summary>Gets the split text value of the first <see cref="T:TagLib.Asf.ContentDescriptor" /> in the current instance that matchs any of a collection of names.</summary>
        <returns>A <see cref="T:System.String" /> array containing the split text of the first matching descriptor.</returns>
        <remarks>Multiple names are accepted because some descriptors have multiple name possibilities. For example, to access mood, <c>object.GetDescriptorString ("WM/Mood", "Mood")</c> would be appropriate. Also, order does not matter and <c>object.GetDescriptorString ("Mood", "WM/Mood")</c> will yield the same results.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDescriptorStrings">
      <MemberSignature Language="C#" Value="public void SetDescriptorStrings (string[] value, string[] names);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String[]" />
        <Parameter Name="names" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.String" /> array containing a values to store.</param>
        <param name="names">A <see cref="T:System.String" /> array containing a collection of descriptor names.</param>
        <summary>Stores a joined string value in a descriptor with the first name and removes all descriptors with other names.</summary>
        <remarks>As some descriptors have multiple name possibilities, it is important to remove the contents in other names when when storing a value a specific name.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>This class is used to access and manipulate tags stored in ASF content descriptor objects and extended content descriptor objects.</summary>
    <remarks />
  </Docs>
</Type>
