@using HallOfBeorn.Models
@model CardViewModel

@{
    ViewBag.Title = @Model.Title;
}

<div class="titleBox" style="display:inline-block;max-width:310px;margin-right:10px;">
    <div class="titleNameBox">
        @if (@Model.IsUnique)
        {
            <div style="font-size:1.75em;font-family:Verdana;"><img src="/Images/unique-card.png" style="margin-right:8px;margin-bottom:-2px;height:22px;width:22px;"/>@Model.Title</div>
        } else {
            <div style="font-size:1.75em;font-family:Verdana;">@Model.Title</div>
        
            if (!string.IsNullOrEmpty(@Model.OppositeTitle))
            {
                <div style="font-size:1em;font-family:Verdana;color:#34282C;">@Model.OppositeTitle</div>
            }
        }
        <div style="margin-top:4px;margin-bottom:2px;">
            <span style="display:inline-block;max-width:154px;"><a href="@Model.SetSearchUrl" title="Search for @Model.SetName">@Model.SetName</a></span><span style="margin-left:8px;display:inline-block;">@string.Format("#{0} (x{1})", @Model.Number, @Model.Quantity)</span>
            @if (!string.IsNullOrEmpty(@Model.EasyModeQuantity))
            {
                <span style="margin-left:8px;">@string.Format("(Easy Mode x{0})", @Model.EasyModeQuantity)</span>
            }
        </div>
        @if (@Model.HasEncounterSet)
        {
            <div style="margin-top:8px;margin-bottom:4px;">
                <a title="@Model.EncounterSet" href="@Model.EncounterSetLink"><img src="@Model.EncounterSetImagePath" title="@Model.EncounterSet" style="margin-left:4px;margin-bottom:-4px;width:42px;height:42px;" /></a>

                @if (@Model.HasIncludedEncounterSets)
                {
                    <span style="margin-top:4px;margin-bottom:4px;border-top-left-radius:12px;border-top-right-radius:12px;border-bottom-left-radius:4px;border-bottom-right-radius:4px;border:1px solid black;padding-left:2px;padding-right:2px;padding-top:14px;padding-bottom:2px;">
                    @foreach (var encounterSet in @Model.IncludedEncounterSets)
                    {
                    <span>
                        <a title="@encounterSet.Name" href="@encounterSet.Link"><img src="@encounterSet.ImagePath" style="width:30px;height:30px;margin-left:4px;margin-right:4px;margin-bottom:-4px;" title="@encounterSet.Name" /></a>
                    </span>
                    }
                    </span>
                }
            </div>
        }
    </div>

    @if (@Model.HasSecondImage)
    {
        <span>
            <img src="@Model.ImagePath1" style="max-height:200px;"/>
            <img src="@Model.ImagePath2" style="max-height:200px;"/>
        </span>
    }
    else
    {
        <img src="@Model.ImagePath" style="max-width: 285px;max-height: 400px;"/>
    }
</div>
<div class="statBox" style="display:inline-block;max-width:300px;vertical-align:top;">
    <div style="display:inline-block;min-width:30px;min-height:300px;">
        <div class="statHeaderBox" style="min-height:120px;">
            <div class="statTypeBox">
                @if (@Model.HasSphere)
                {
                    <img style="margin-bottom:-4px;margin-right:8px;height:24px;width:24px;" src='@string.Format("/Images/{0}.png", @Model.Sphere)' />
                }
                <span style="font-weight:bold;font-size:14pt;">@Model.CardTypeName</span>
            </div>
            <div class="statValueBox" style="margin-top:2px;margin-bottom:8px;">
                @switch (@Model.CardType)
                {
                    case CardType.Hero:
                        {
                            <span style="margin-left:2px;width:40px;color:#616161;">(</span><span style="margin-left:4px;margin-right:4px;font-weight:bold;">@Model.ThreatCost</span><span style="color:#616161;">)</span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Willpower</span><img style="margin-bottom:-3px;" src="/Images/willpower.gif" /></span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Attack</span><img style="margin-bottom:-3px;" src="/Images/attack.gif" /></span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Defense</span><img style="margin-bottom:-3px;" src="/Images/defense.gif" /></span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.HitPoints</span><img style="margin-bottom:-4px;margin-left:-4px;width:20px;height:20px;" src="/Images/heart.png"/></span>
                        }
                        break;
                    case CardType.Ally:
                        {
                            <span style="margin-left:2px;width:40px;color:#616161;">(</span><span style="margin-left:4px;margin-right:4px;font-weight:bold;">@Model.ResourceCost</span><span style="color:#616161;">)</span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Willpower</span><img style="margin-bottom:-3px;" src="/Images/willpower.gif" /></span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Attack</span><img style="margin-bottom:-3px;" src="/Images/attack.gif" /></span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Defense</span><img style="margin-bottom:-3px;" src="/Images/defense.gif" /></span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.HitPoints</span><img style="margin-bottom:-4px;margin-left:-4px;width:20px;height:20px;" src="/Images/heart.png"/></span>
                        }
                        break;
                    case CardType.Attachment:
                        {
                            <span style="margin-left:2px;width:40px;color:#616161;">(</span><span style="margin-left:4px;margin-right:4px;font-weight:bold;">@Model.ResourceCost</span><span style="color:#616161;">)</span>
                        }
                        break;
                    case CardType.Event:
                        {
                            <span style="margin-left:2px;width:40px;color:#616161;">(</span><span style="margin-left:4px;margin-right:4px;font-weight:bold;">@Model.ResourceCost</span><span style="color:#616161;">)</span>
                        }
                        break;
                    case CardType.Enemy:
                        {
                            <span style="margin-left:2px;width:40px;color:#616161;">(</span><span style="margin-left:4px;margin-right:4px;font-weight:bold;">@Model.EngagementCost</span><span style="color:#616161;">)</span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Threat</span><img style="margin-bottom:-3px;" src="/Images/threat.png" /></span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Attack</span><img style="margin-bottom:-3px;" src="/Images/attack.gif" /></span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Defense</span><img style="margin-bottom:-3px;" src="/Images/defense.gif" /></span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.HitPoints</span><img style="margin-bottom:-4px;margin-left:-4px;width:20px;height:20px;" src="/Images/heart.png"/></span>
                        }
                        break;
                    case CardType.Location:
                        {
                            <span style="margin-left:2px;width:60px;color:#616161;">Quest Points</span><span style="margin-left:8px;font-weight:bold;">@Model.QuestPoints</span>
                            <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Threat</span><img style="margin-bottom:-3px;" src="/Images/threat.png" /></span>
                        }
                        break;
                    case CardType.Treachery:
                        {
                        }
                        break;
                    case CardType.Objective_Ally:
                    case CardType.Objective:
                        {
                            if (@Model.HasCharacterStats)
                            {
                                <span style="margin-left:2px;width:24px;"><span style="margin-right:2px;font-weight:bold;">@Model.Willpower</span><img style="margin-bottom:-3px;" src="/Images/willpower.gif" /></span>
                                <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Attack</span><img style="margin-bottom:-3px;" src="/Images/attack.gif" /></span>
                                <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.Defense</span><img style="margin-bottom:-3px;" src="/Images/defense.gif" /></span>
                                <span style="width:24px;margin-left:20px;"><span style="margin-right:2px;font-weight:bold;">@Model.HitPoints</span><img style="margin-bottom:-4px;margin-left:-4px;width:20px;height:20px;" src="/Images/heart.png"/></span>
                            }
                        }
                        break;
                    case CardType.Quest:
                        {
                            <span style="margin-left:2px;width:40px;color:#616161;">Stage</span><span style="margin-left:4px;font-weight:bold;">@Model.StageNumber</span>
                            <span style="width:40px;color:#616161;margin-left:14px;">Quest Points</span><span style="margin-left:4px;font-weight:bold;">@Model.QuestPoints</span>
                        }
                        break;
                    case CardType.Treasure:
                        {
                            <span style="margin-left:2px;width:40px;color:#616161;">(</span><span style="margin-left:4px;margin-right:4px;font-weight:bold;">@Model.ResourceCost</span><span style="color:#616161;">)</span>
                        }
                        break;
                    case CardType.Nightmare_Setup:
                    case CardType.Campaign:
                    case CardType.Burden:
                        break;
                    default:
                        break;
                }
            </div>
            
            <div class="statTextBox" style="margin:2px;padding-top:0px;padding-left:6px;padding-right:6px;border: 1px solid gray;border-radius:4px;max-width:500px;">

            @if (@Model.Traits.Count() > 0)
            {
                <div style="text-align:center;">
                @foreach (var trait in Model.Traits)
                {
                    <a title="Trait Search" href='@string.Format("/Cards/Search?Trait={0}", @trait.Trim())'><b><i>@trait</i></b></a> @: &nbsp;
                }
                </div>
            }
                        
            @if (@Model.Keywords.Count() > 0)
            {
                <span style="margin-left:6px;">
                @foreach (var keyword in Model.KeywordEffects)
                {
                    if (keyword.Tokens.Count > 1 && !keyword.Tokens.Any(t => t.IsIcon))
                    {
                        <a title="Keyword Search" href='@string.Format("/Cards/Search?Keyword={0}", @keyword.GetText("[Card]"))'>@keyword.GetText(@Model.Title)</a>
                    }
                    else if (keyword.Tokens.Count > 1 && keyword.Tokens.Any(t => t.IsIcon))
                    {
                        <a title="Keyword Search" href='@string.Format("/Cards/Search?Keyword={0}", @keyword.GetText("[Card]"))'><span>@keyword.GetIconPrefix(@Model.Title) <img src="@keyword.GetIconPath()" style="height:16px;margin-left:2px;margin-right:-4px;margin-bottom:-2px;" /> @keyword.GetIconSuffix(@Model.Title)</span></a>
                    }
                    else
                    {
                        foreach (var token in keyword.Tokens)
                        {
                            if (token.IsTrait)
                            {
                                <a style="font-weight:bold;font-style:italic;" title="Trait Search" href='@string.Format("/Cards/Search?Trait={0}", @token.Text.Trim())'>@token.Text</a>
                                
                                if (token.HasSuffix && token.Suffix != ".")
                                {
                                    @: @token.Suffix
                                }
                            }
                            else if (token.IsIcon)
                            {
                                if (token.HasSuffix)
                                {
                                    <img src="@token.ImagePath" style="height:16px;margin-left:2px;margin-right:-4px;margin-bottom:-2px;" />
                                    @: @token.Suffix
                                }
                                else
                                {
                                    <img src="@token.ImagePath" style="height:16px;margin-left:2px;margin-right:2px;margin-bottom:-2px;" />
                                }
                            }
                            else if (token.IsTitleReference)
                            {
                                if (token.HasSuffix)
                                {
                                    @: @string.Format("{0}{1}", @Model.Title, @token.Suffix)
                                }
                                else
                                {
                                @: @Model.Title
                                }
                            }
                            else
                            {
                                if (keyword.Tokens.Count == 1)
                                {
                                    <a title="Keyword Search" href='@string.Format("/Cards/Search?Keyword={0}", @token.Text)'>@token.Text</a>
                                }
                                else
                                {
                                    @: @token.Text
                                }                    
                            }
                        }
                    }
                }
                </span>
                <br />
            }

            <div style="padding:4px;">
                @if (@Model.TextEffects.Count() > 0)
                {
                    foreach (var effect in Model.TextEffects)
                    {   
                        var count = 0;
                        foreach (var token in effect.Tokens)
                        {
                            count++;
                            if (token.IsTrigger || effect.IsCritical)
                            {
                                <b>@token.Text</b>
                            }
                            else if (token.IsStrong)
                            {
                                <strong>@token.Text</strong>
                            }
                            else if (token.IsEmphasized)
                            {
                                <em>@token.Text</em>
                            }
                            else if (token.IsTrait)
                            {
                                <a title="Trait Search" style="font-weight:bold;font-style:italic;" href='@string.Format("/Cards/Search?Trait={0}.", @token.Text.Trim().TrimEnd('.'))'>@token.Text</a>
                                
                                if (token.HasSuffix)
                                {
                                    if (token.Suffix != "." || count != effect.Tokens.Count)
                                    {
                                        @: @token.Suffix
                                    }
                                }
                            }
                            else if (token.IsIcon)
                            {
                                if (token.HasSuffix)
                                {
                                    if (token.HasPrefix)
                                    {
                                        <span style="margin-right:-6px;">@token.Prefix</span>
                                    }
                                                
                                    <img src="@token.ImagePath" style="height:16px;margin-left:@token.LeftMargin;margin-right:-4px;margin-bottom:-2px;" />
                                    @: @token.Suffix
                                }
                                else
                                {
                                    <img src="@token.ImagePath" style="height:16px;margin-left:@token.LeftMargin;margin-right:2px;margin-bottom:-2px;" />
                                }
                            }
                            else
                            {
                                @: @token.Text
                            }
                        }
                                            
                        <br />
                        <br />
                    }
                }
                            
                @if (@Model.ShadowEffects.Count() > 0)
                {
                    <img src="/Images/ShadowDivider.png" style="display:block;margin-left:auto;margin-right:auto;width:285px;"/>
                    <br />
                                
                    foreach (var effect in Model.ShadowEffects)
                    {
                        foreach (var token in effect.Tokens)
                        {
                            if (token.IsTrigger)
                            {
                                <b>@token.Text</b>
                            }
                            else if (token.IsTrait)
                            {
                                <b><i>@token.Text</i></b>
                                
                                if (token.HasSuffix)
                                {
                                    @: @token.Suffix
                                }
                            }
                            else if (token.IsIcon)
                            {
                                if (token.HasSuffix)
                                {
                                    <img src="@token.ImagePath" style="height:16px;margin-left:2px;margin-right:-4px;margin-bottom:-2px;" />
                                    @: @token.Suffix
                                }
                                else
                                {
                                    <img src="@token.ImagePath" style="height:16px;margin-left:2px;margin-right:2px;margin-bottom:-2px;" />
                                }
                            }
                            else
                            {
                                @: @token.Text
                            }
                        }
                    }
                }

                @if (!string.IsNullOrEmpty(@Model.VictoryPoints))
                {
                    <br />
                    <div style="text-align:right;font-weight:bold;">@Model.VictoryPoints</div>
                }
                @if (!string.IsNullOrEmpty(@Model.PassValue))
                {
                    <br />
                    <div style="text-align:right;font-weight:bold;">@Model.PassValue</div>
                }
            </div>

            @if (@Model.HasFlavorText || @Model.HasOppositeFlavorText)
            {
                <br />
                        
            <p style="text-align:center;">
                @if (@Model.HasFlavorText)
                {
                    foreach (var line in @Model.FlavorText)
                    {
                        <i>@line</i><br />
                    }
                }
                @if (@Model.HasOppositeFlavorText)
                {
                    if (@Model.HasFlavorText)
                    {
                        <br />
                        <br />
                    }
                                
                    foreach (var line in @Model.OppositeFlavorText)
                    {
                        <i>@line</i><br />
                    }
                }
            </p>
            }
            </div>
        </div>
       </div>
</div>
<div class="extraBox">
    <div>
        @if (!string.IsNullOrEmpty(@Model.Artist))
        {
            <div />
            <span style="margin-left:5px;margin-right:-3px;">Illus.</span>
            if (!string.IsNullOrEmpty(@Model.ArtistURL))
            {
                <a style="margin-left:5px;margin-right:10px;" href="@Model.ArtistURL" target="_blank">@Model.Artist</a>
            }
            else
            {
                <span style="margin-left:5px;margin-right:10px;">@Model.Artist</span>
            }

            if (!string.IsNullOrEmpty(@Model.SecondArtist))
            {
                <span style="margin-left:-5px;">&amp;</span>
                if (!string.IsNullOrEmpty(@Model.SecondArtistURL))
                {
                    <a style="margin-left:1px;margin-right:10px;" href="@Model.SecondArtistURL" target="_blank">@Model.SecondArtist</a>
                }
                else
                {
                    <span style="margin-left:1px;margin-right:10px;">@Model.SecondArtist</span>
                }
            }
                    
                    
            if (!string.IsNullOrEmpty(@Model.OppositeArtist))
            {
                <span style="margin-left:5px;margin-right:-3px;">Opposite</span>
                if (!string.IsNullOrEmpty(@Model.OppositeArtistURL))
                {
                    <a style="margin-left:5px;margin-right:10px;" href="@Model.OppositeArtistURL" target="_blank">@Model.OppositeArtist</a>
                }
                else
                {
                    <span style="margin-left:5px;margin-right:10px;">@Model.OppositeArtist</span>
                }
            }
        }
        @if (@Model.HasErrata)
        {
            <span style="margin-left:10px;margin-top:10px;display:inline-block;"><a title="Official LotR FAQ" href="@Model.ErrataUrl" target="_blank">Errata</a></span>
        }
        @if (@Model.HasCategories)
        {
            <br />
            <div style="font-weight:bold;margin-left:6px;margin-top:10px;margin-bottom:4px;">Categories</div>
            foreach (var category in @Model.Categories())
            {
                <span style="display:inline-block;margin-left:8px;border-radius:6px;border-width:2px;border-style:solid;border-color:darkgrey;"><a title='@string.Format("Category Search for {0}", @category.Key)' href="@category.Value" style="text-decoration:none;">@category.Key</a></span>
            }
        }
        </div>
        <div>
        <div>
            <div style="margin-top:12px;margin-left:4px;margin-bottom:4px;"><a href="@Model.HallOfBeornBlogSearchUrl" target="_blank" title="Search Hall of Beorn for: @Model.Title">On Hall of Beorn Blog</a></div>
            <div style="margin-left:4px;margin-bottom:4px;"><a href="@Model.TalesFromTheCardsBlogSearchUrl" target="_blank" title="Search Tales From the Cards for: @Model.Title">On Tales From The Cards</a></div>
            <div style="margin-left:4px;margin-bottom:4px;"><a href="@Model.MasterOfLoreBlogSearchUrl" target="_blank" title="Search Master of Lore for: @Model.Title">On Master of Lore</a></div>
        </div>
        <div>
            <div>
                @if (@Model.Decks.Count() > 0)
                {
                    <br />
                    <div style="margin-bottom:12px;color:#616161;font-weight:bold;">Featured Decks</div>
                    <div>
                    @foreach (var deck in @Model.Decks)
                    {
                        <div style="margin-bottom:4px;"><a title="@deck.Name" href="@deck.Url" target="_blank">@deck.Name</a></div>
                    }
                    </div>
                }
            </div>

            <div>
                @if (@Model.RelatedCards.Count > 0)
                {
                    <br />
                    <div style="margin-bottom:12px;color:#616161;font-weight:bold;">Related Cards</div>
                    <div>
                                    
                    @foreach (var relatedCard in @Model.RelatedCards)
                    {
                        <div style="margin-bottom:4px;"><a title="@relatedCard.Title" href="@relatedCard.Url">@relatedCard.Description</a></div>
                    }
                    </div>
                }
            </div>
        </div>
    </div>
</div>
