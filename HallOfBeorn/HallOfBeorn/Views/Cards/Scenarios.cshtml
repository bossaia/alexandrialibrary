@using HallOfBeorn.Models
@model ScenarioListViewModel

@{
    ViewBag.Title = "Scenarios";
}

@section scripts {
    <script type="text/javascript" src="/Scripts/highcharts.js"></script>
    <script type="text/javascript">
        var mode = 'Normal';
        $(function () {
            $('#easyModeButton').click(function () {
                $('#easyModeButton').removeClass('inactiveButton').addClass('activeButton');
                $('#normalModeButton').removeClass('activeButton').addClass('inactiveButton');
                $('#nightmareModeButton').removeClass('activeButton').addClass('inactiveButton');
                mode = 'Easy';
                loadCharts();
            });
            $('#normalModeButton').click(function () {
                $('#easyModeButton').removeClass('activeButton').addClass('inactiveButton');
                $('#normalModeButton').removeClass('inactiveButton').addClass('activeButton');
                $('#nightmareModeButton').removeClass('activeButton').addClass('inactiveButton');
                mode = 'Normal';
                loadCharts();
            });
            $('#nightmareModeButton').click(function () {
                $('#easyModeButton').removeClass('activeButton').addClass('inactiveButton');
                $('#normalModeButton').removeClass('activeButton').addClass('inactiveButton');
                $('#nightmareModeButton').removeClass('inactiveButton').addClass('activeButton');
                mode = 'Nightmare';
                loadCharts();
            });
        });

        var mode = 'Normal';
        var scenariosIndex = window.location.href.lastIndexOf("/Scenarios/");
        var id = '';
        if (scenariosIndex != -1) {
            id = window.location.href.substr(scenariosIndex + 11);
        }

        function loadTotals(selector, title, data) {

            var scenarioTitles;
            var enemyData;
            var locationData;
            var treacheryData;
            var objectiveData;
            var objectiveAllyData;
            var shadowData;
            var surgeData;

            var modeData;
            switch (mode) {
                case 'Easy':
                    modeData = data.EasyData;
                    break;
                case 'Normal':
                    modeData = data.NormalData;
                    break;
                case 'Nightmare':
                    modeData = data.NightmareData;
                    break;
            }
            
            scenarioTitles = modeData.ScenarioTitles;
            enemyData = modeData.EnemyTotals;
            locationData = modeData.LocationTotals;
            treacheryData = modeData.TreacheryTotals;
            objectiveData = modeData.ObjectiveTotals;
            objectiveAllyData = modeData.ObjectiveAllyTotals;
            shadowData = modeData.ShadowTotals;
            surgeData = modeData.SurgeTotals;

            $(selector).highcharts({
                chart: {
                    type: 'column'
                },
                title: {
                    text: title + ' (' + mode + ' Mode)',
                    x: -20
                },
                subtitle: {
                    text: 'Encounter Card Types By Scenario',
                    x: -20
                },
                xAxis: {
                    categories: scenarioTitles
                },
                yAxis: {
                    title: {
                        text: 'Count'
                    },
                    plotLines: [{
                        value: 0,
                        width: 1,
                        color: '#808080'
                    }]
                },
                credits: {
                    enabled: false
                },
                tooltip: {
                    pointFormat: '<span>{series.name}</span>: <b>{point.y}</b> ({point.percentage:.0f}%)<br/>'
                    //pointFormat: '{point.percentage}%'
                    //valueSuffix: ' {category}'
                    //formatter: function () {
                    //    return '{category} : <b>' + Highcharts.numberFormat(this.percentage, 1) + '%</b>';
                    //}
                },
                legend: {
                    layout: 'horizontal',
                    align: 'center',
                    verticalAlign: 'bottom',
                    borderWidth: 0
                },
                plotOptions: {
                    column: {
                        stacking: 'percent'
                    }
                },
                series: [{
                    name: 'Enemies',
                    data: enemyData
                }, {
                    name: 'Locations',
                    data: locationData
                }, {
                    name: 'Treacheries',
                    data: treacheryData
                }, {
                    name: 'Objectives',
                    data: objectiveData
                }, {
                    name: 'Objective Allies',
                    data: objectiveAllyData
                }, {
                    name: 'Shadows',
                    data: shadowData
                }, {
                    name: 'Surges',
                    data: surgeData
                }
                ]
            });
        }

        function loadCharts() {
            $.get("/Cards/ScenarioTotals?id=Core+Set,Shadows+of+Mirkwood").success(function (data) {
                loadTotals('#coreTotalsContainer', 'Core Set and Shadows of Mirkwood', data);
            });
            $.get("/Cards/ScenarioTotals?id=Khazad-dûm,Dwarrowdelf").success(function (data) {
                loadTotals('#kdTotalsContainer', 'Khazad-dûm and Dwarrowdelf', data);
            });
            $.get("/Cards/ScenarioTotals?id=Heirs+of+Númenor,Against+the+Shadow").success(function (data) {
                loadTotals('#honTotalsContainer', 'Heirs of Númenor and Against the Shadow', data);
            });
            $.get("/Cards/ScenarioTotals?id=The+Voice+of+Isengard,The+Ring-maker").success(function (data) {
                loadTotals('#voiTotalsContainer', 'The Voice of Isengard and The Ring-maker', data);
            });
            $.get("/Cards/ScenarioTotals?id=The+Hobbit").success(function (data) {
                loadTotals('#hobbitTotalsContainer', 'The Hobbit', data);
            });
            $.get("/Cards/ScenarioTotals?id=The+Lord+of+the+Rings").success(function (data) {
                loadTotals('#lotrTotalsContainer', 'The Lord of the Rings', data);
            });
            $.get("/Cards/ScenarioTotals?id=GenCon").success(function (data) {
                loadTotals('#genConTotalsContainer', 'GenCon', data);
            });
        }
        
        if (id == null || id == '') {
            loadCharts();
        } else {
            
            if (id != null && id.length > 0) {

                $.get("/Cards/ScenarioDetails/" + id).success(function (result) {
                    var enemyData = [];
                    var locationData = [];
                    var treacheryData = [];
                    var shadowData = [];

                    if (result.HasEasy) {
                        enemyData.push(result.EasyEnemies);
                        locationData.push(result.EasyLocations);
                        treacheryData.push(result.EasyTreacheries);
                        shadowData.push(result.EasyShadows);
                    }

                    enemyData.push(result.NormalEnemies);
                    locationData.push(result.NormalLocations);
                    treacheryData.push(result.NormalTreacheries);
                    shadowData.push(result.NormalShadows);

                    if (result.HasNightmare) {
                        enemyData.push(result.NightmareEnemies);
                        locationData.push(result.NightmareLocations);
                        treacheryData.push(result.NightmareTreacheries);
                        shadowData.push(result.NightmareShadows);
                    }

                    var series = [
                        {
                            name: 'Enemies',
                            data: enemyData
                        },
                        {
                            name: 'Locations',
                            data: locationData
                        },
                        {
                            name: 'Treacheries',
                            data: treacheryData
                        },
                        {
                            name: 'Shadows',
                            data: shadowData
                        }
                    ];

                    if (result.EasyHasObjectives || result.NormalHasObjectives || result.NightmareHasObjectives) {
                        var objectiveData = [];
                        if (result.HasEasy) {
                            objectiveData.push(result.EasyObjectives);
                        }
                        objectiveData.push(result.NormalObjectives);
                        if (result.HasNightmare) {
                            objectiveData.push(result.NightmareObjectives);
                        }

                        series.push({
                            name: 'Objectives',
                            data: objectiveData
                        });
                    }
                    if (result.EasyHasObjectiveAllies || result.NormalHasObjectiveAllies || result.NightmareHasObjectiveAllies) {
                        var objectiveAllyData = [];
                        if (result.HasEasy) {
                            objectiveAllyData.push(result.EasyObjectiveAllies);
                        }
                        objectiveAllyData.push(result.NormalObjectiveAllies);
                        if (result.HasNightmare) {
                            objectiveAllyData.push(result.NightmareObjectiveAllies);
                        }

                        series.push({
                            name: 'Objective Allies',
                            data: objectiveAllyData
                        });
                    }
                    if (result.EasyHasSurge || result.NormalHasSurge || result.NightmareHasSurge) {
                        var surgeData = [];
                        if (result.HasEasy) {
                            surgeData.push(result.EasySurges);
                        }
                        surgeData.push(result.NormalSurges);
                        if (result.HasNightmare) {
                            surgeData.push(result.NightmareSurges);
                        }

                        series.push({
                            name: 'Surge',
                            data: surgeData
                        });
                    }

                    var categories = [];

                    if (result.HasEasy) {
                        categories.push("Easy");
                    }

                    categories.push("Normal");

                    if (result.HasNightmare) {
                        categories.push("Nightmare");
                    }

                    $('#chartContainer').highcharts({
                        chart: {
                            type: 'bar'
                        },
                        title: {
                            text: 'Statistics for ' + result.title
                        },
                        xAxis: {
                            categories: categories
                        },
                        yAxis: {
                            min: 0,
                            title: {
                                text: 'Encounter Card Breakdowns'
                            }
                        },
                        credits: {
                            enabled: false
                        },
                        legend: {
                            reversed: false
                        },
                        plotOptions: {
                            series: {
                                cursor: 'pointer',
                                point: {
                                    events: {
                                        click: function (e) {
                                            var cardType = 'Encounter';
                                            var query = '';
                                            var hasShadow = 'Any';
                                            switch (this.series.name) {
                                                case 'Enemies':
                                                    cardType = 'Enemy';
                                                    break;
                                                case 'Locations':
                                                    cardType = 'Location';
                                                    break;
                                                case 'Treacheries':
                                                    cardType = 'Treachery';
                                                    break;
                                                case 'Objectives':
                                                    cardType = 'Objective';
                                                    break;
                                                case 'Objective Allies':
                                                    cardType = 'Objective_Ally';
                                                    break;
                                                case 'Surge':
                                                    query = 'Surge';
                                                    break;
                                                case 'Shadows':
                                                    hasShadow = 'Yes';
                                                    break;
                                            }

                                            var quest = encodeURIComponent(result.title);

                                            var url = 'http://' + window.location.host + "/Cards/Search?CardType=" + cardType + "&Quest=" + quest + "&HasShadow=" + hasShadow;
                                            if (query != '') {
                                                url += '&Query=' + query;
                                            }

                                            window.open(url);
                                            return false;
                                        }
                                    }
                                }
                            }
                        },
                        series: series,
                        tooltip: {
                            pointFormat: '<span style="font-size:11px;">{series.name}: {point.y}</span>'
                        }
                    });
                });
            }
        }
     </script>
}

@if (@Model.Detail != null)
{
    <h2>@Model.Detail.Title</h2>
    
    <div>
    @foreach (var questCard in @Model.Detail.QuestCards)
    {
        <div style="display:inline-block;">
        <div>
            <span>@questCard.StageNumber</span><span style="margin-left:2px;display:inline-block;"><a title="Details for @questCard.FullTitle" href="@questCard.Url">@questCard.FullTitle</a></span>
            @if (@questCard.IsNightmare)
            {
                <span>[NIGHTMARE]</span>
            }   
        </div>
        <div>
            @if (@questCard.HasSecondImage)
            {
                <span>
                    <img src="@questCard.ImagePath1" style="max-height:200px;"/>
                    <img src="@questCard.ImagePath2" style="max-height:200px;"/>
                </span>
            }
            else
            {
                <img src="@questCard.ImagePath" style="max-width:285px;max-height:400px;"/>
            }
        </div>
        </div>
    }
    </div>
    
    if (!string.IsNullOrEmpty(@Model.Detail.RulesUrl))
    {
        <h3>Rules and Errata</h3>
        <div><a title="@Model.Detail.RulesLabel" href="@Model.Detail.RulesUrl" target="_blank">Rules Sheet</a></div>
    }
    if (@Model.Detail.CampaignCard != null)
    {
        <h3>Campaign Card</h3>
        <div><a title="@Model.Detail.CampaignCard.Title" href="@Model.Detail.CampaignCard.Link"><span style="display:inline-block;width:300px;">@Model.Detail.CampaignCard.Title</span></a></div>
    }
    <div style="margin-top:16px;margin-bottom:-8px;">
        <span style="display:inline-block;width:300px;font-weight:bold;">Title</span>
        <span style="display:inline-block;margin-left:4px;width:60px;font-weight:bold;">Normal</span>
        <span style="display:inline-block;margin-left:4px;width:60px;font-weight:bold;">Easy</span>
        <span style="display:inline-block;margin-left:4px;width:60px;font-weight:bold;">Nightmare</span>
    </div>
    <h3>Quest Cards</h3>
        foreach (var questCard in @Model.Detail.QuestCards)
        {
            <div>
                <a title="@questCard.FullTitle" href="@questCard.Url"><span style="display:inline-block;width:300px;">@questCard.StageNumber - @questCard.FullTitle</span></a>
                <span style="display:inline-block;margin-left:4px;width:60px;">@questCard.NormalQuantity</span>
                <span style="display:inline-block;margin-left:4px;width:60px;">@questCard.EasyQuantity</span>
                <span style="display:inline-block;margin-left:4px;width:60px;">@questCard.NightmareQuantity</span>
            </div>
        }
        <div />
        var lastEncounterSet = string.Empty;
        foreach (var scenarioCard in @Model.Detail.ScenarioCards)
        {
            if (@lastEncounterSet != @scenarioCard.EncounterSet)
            {
                <div><h3><a title="Search for @scenarioCard.EncounterSet" href="@scenarioCard.EncounterSetLink">@scenarioCard.EncounterSet</a><img style="margin-left:4px;width:20px;height:20px;" src="@scenarioCard.EncounterSetImage" /></h3></div>
            }
            <div>
                <a title="@scenarioCard.Title" href="@scenarioCard.Link"><span style="display:inline-block;width:300px;">@scenarioCard.Title</span></a>
                <span style="display:inline-block;margin-left:4px;width:60px;">@scenarioCard.NormalQuantity</span>
                <span style="display:inline-block;margin-left:4px;width:60px;">@scenarioCard.EasyQuantity</span>
                <span style="display:inline-block;margin-left:4px;width:60px;">@scenarioCard.NightmareQuantity</span>
            </div>
    
            lastEncounterSet = scenarioCard.EncounterSet;
        }
     <div style="margin-top:40px;" id="chartContainer"></div>
}
else {
    <h2>Scenarios</h2>
    
    <div>
    @foreach (var scenarioGroup in @Model.ScenarioGroups)
    {
        <div><h3>@scenarioGroup.Name</h3></div>
        foreach (var scenario in @scenarioGroup.Scenarios)
        {
        <div>
            <a title="Details for @scenario.Title" href="@scenario.Link">@scenario.Title</a>
        </div>
        }
    }
    </div>
    <div><button id="easyModeButton" class="inactiveButton">Easy</button><button id="normalModeButton" class="activeButton">Normal</button><button id="nightmareModeButton" class="inactiveButton">Nightmare</button></div>
    <div style="margin-top:40px;" id="coreTotalsContainer"></div>
    <div style="margin-top:40px;" id="kdTotalsContainer"></div>
    <div style="margin-top:40px;" id="honTotalsContainer"></div>
    <div style="margin-top:40px;" id="voiTotalsContainer"></div>
    <div style="margin-top:40px;" id="hobbitTotalsContainer"></div>
    <div style="margin-top:40px;" id="lotrTotalsContainer"></div>
    <div style="margin-top:40px;" id="genConTotalsContainer"></div>
}