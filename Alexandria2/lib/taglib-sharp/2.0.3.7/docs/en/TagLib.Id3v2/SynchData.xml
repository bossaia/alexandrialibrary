<Type Name="SynchData" FullName="TagLib.Id3v2.SynchData">
  <TypeSignature Language="C#" Value="public static class SynchData" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName="ToUInt">
      <MemberSignature Language="C#" Value="public static uint ToUInt (TagLib.ByteVector data);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:TagLib.ByteVector" /> containing a synched value to be converted.</param>
        <summary>Converts a synched integer into a standard <see cref="T:System.UInt32" />.</summary>
        <returns>A <see cref="T:System.UInt32" /> containing the value of the synched number.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="FromUInt">
      <MemberSignature Language="C#" Value="public static TagLib.ByteVector FromUInt (uint value);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.UInt32" /> to be converted into a synched value.</param>
        <summary>Converts a standard <see cref="T:System.UInt32" /> into a synched value.</summary>
        <returns>A <see cref="T:TagLib.ByteVector" /> containing the synched representation of the number.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ResynchByteVector">
      <MemberSignature Language="C#" Value="public static void ResynchByteVector (TagLib.ByteVector data);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:TagLib.ByteVector" /> to resynchronize.</param>
        <summary>Resynchronizes a <see cref="T:TagLib.ByteVector" /> by replacing any instance of <c>FF00</c> with <c>FF</c>.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UnsynchByteVector">
      <MemberSignature Language="C#" Value="public static void UnsynchByteVector (TagLib.ByteVector data);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:TagLib.ByteVector" /> to unsynchronize.</param>
        <summary>Unsynchronizes a <see cref="T:TagLib.ByteVector" />.</summary>
        <remarks>Unsynchronization prevents an ID3v2 tag from being mistaken for an MPEG audio synch. Any time a byte equal to <c>FF</c> is followed by a byte greater than <c>7F</c>, <c>00</c> is inserted after the <c>FF</c>. To prevent failue, any instance of <c>FF00</c> is replaced with <c>FF0000</c>.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>This static class provides methods for dealing with ID3v2 unsynchronization.</summary>
    <remarks />
  </Docs>
</Type>
