<Type Name="File" FullName="TagLib.File">
  <TypeSignature Language="C#" Value="public abstract class File" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected File (string path);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">A <see cref="T:System.String" /> specifying the path of the file in the default file system.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.File" /> for a specified file name.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public abstract void Save ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Saves the changes in the current instance to the file it represents.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReadBlock">
      <MemberSignature Language="C#" Value="public TagLib.ByteVector ReadBlock (int length);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="length">A <see cref="T:System.Int32" /> specifying the number of bytes to read.</param>
        <summary>Reads a specified number of bytes from the current instance at the current seek point.</summary>
        <returns>A <see cref="T:TagLib.ByteVector" /> representing the bytes read.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="WriteBlock">
      <MemberSignature Language="C#" Value="public void WriteBlock (TagLib.ByteVector data);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:TagLib.ByteVector" /> containing the data to write.</param>
        <summary>Writes a block of data at the current seek position.</summary>
        <remarks>This will overwrite any existing data at the seek position and append new data to the file if writing past the current end.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public long Find (TagLib.ByteVector pattern, long startPosition, TagLib.ByteVector before);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
        <Parameter Name="startPosition" Type="System.Int64" />
        <Parameter Name="before" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing data to be found in the file.</param>
        <param name="startPosition">A <see cref="T:System.Int64" /> specifying at what seek position to start searching.</param>
        <param name="before">A <see cref="T:TagLib.ByteVector" /> containing data which must not occur before <paramref name="pattern" />.</param>
        <summary>Searches for a byte pattern in a file after a given offset, checking that it does not occur before another pattern.</summary>
        <returns>A <see cref="T:System.Int64" /> specifying at which index the pattern was found. If the pattern is not found or <paramref name="before" /> is found first, -1 is returned.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public long Find (TagLib.ByteVector pattern, long startPosition);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
        <Parameter Name="startPosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing data to be found in the file.</param>
        <param name="startPosition">A <see cref="T:System.Int64" /> specifying at what seek position to start searching.</param>
        <summary>Searches for a byte pattern in a file after a given offset.</summary>
        <returns>A <see cref="T:System.Int64" /> specifying at which index the pattern was found. If the pattern is not found, -1 is returned.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public long Find (TagLib.ByteVector pattern);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing data to be found in the file.</param>
        <summary>Searches for a byte pattern in a file starting at the beginning of the file.</summary>
        <returns>A <see cref="T:System.Int64" /> specifying at which index the pattern was found. If the pattern is not found, -1 is returned.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RFind">
      <MemberSignature Language="C#" Value="public long RFind (TagLib.ByteVector pattern, long startPosition);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
        <Parameter Name="startPosition" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing data to be found in the file.</param>
        <param name="startPosition">A <see cref="T:System.Int64" /> specifying at what seek position to start searching.</param>
        <summary>Searches backward for a byte pattern in a file before a given offset.</summary>
        <returns>A <see cref="T:System.Int64" /> specifying at which index the pattern was found. If the pattern is not found, -1 is returned.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RFind">
      <MemberSignature Language="C#" Value="public long RFind (TagLib.ByteVector pattern);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pattern" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="pattern">A <see cref="T:TagLib.ByteVector" /> containing data to be found in the file.</param>
        <summary>Searches backward for a byte pattern in a file starting at the end of the file.</summary>
        <returns>A <see cref="T:System.Int64" /> specifying at which index the pattern was found. If the pattern is not found, -1 is returned.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (TagLib.ByteVector data, long start, long replace);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TagLib.ByteVector" />
        <Parameter Name="start" Type="System.Int64" />
        <Parameter Name="replace" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:TagLib.ByteVector" /> to insert into the file.</param>
        <param name="start">A <see cref="T:System.Int64" /> specifying at which point to insert the data.</param>
        <param name="replace">A <see cref="T:System.Int64" /> specifying the number of bytes to replace. Typically this is the original size of the data block so that a new block will replace the old one.</param>
        <summary>Inserts a block of data into the file at a specified point, replacing another block of data.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (TagLib.ByteVector data, long start);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="TagLib.ByteVector" />
        <Parameter Name="start" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:TagLib.ByteVector" /> to insert into the file.</param>
        <param name="start">A <see cref="T:System.Int64" /> specifying at which point to insert the data.</param>
        <summary>Inserts a block of data into the file at a specified point.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveBlock">
      <MemberSignature Language="C#" Value="public void RemoveBlock (long start, long length);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int64" />
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="start">A <see cref="T:System.Int64" /> specifying at which point to remove data.</param>
        <param name="length">A <see cref="T:System.Int64" /> specifying the number of bytes to remove.</param>
        <summary>Removes a block of data from the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (long offset, System.IO.SeekOrigin origin);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
        <Parameter Name="origin" Type="System.IO.SeekOrigin" />
      </Parameters>
      <Docs>
        <param name="offset">A <see cref="T:System.Int64" /> specifying the offset to shift to.</param>
        <param name="origin">A <see cref="T:System.IO.SeekOrigin" /> specifying an origin to seek from.</param>
        <summary>Seeks the read/write pointer in the current instance to a new location relative to an origin.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (long offset);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="offset">A <see cref="T:System.Int64" /> specifying the offset to shift to.</param>
        <summary>Seeks the read/write pointer in the current instance to a new location in the file.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveTags">
      <MemberSignature Language="C#" Value="public abstract void RemoveTags (TagLib.TagTypes types);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="TagLib.TagTypes" />
      </Parameters>
      <Docs>
        <param name="types">A <see cref="T:TagLib.TagTypes" /> containing bitwise combined tag types to be removed from the file.</param>
        <summary>Removes a variety of tags from the current file.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetTag">
      <MemberSignature Language="C#" Value="public abstract TagLib.Tag GetTag (TagLib.TagTypes type, bool create);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Tag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TagLib.TagTypes" />
        <Parameter Name="create" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="T:TagLib.TagTypes" /> specifying what type of tag to get/create.</param>
        <param name="create">A <see cref="System.Boolean" /> specifying whether or not to create a tag if one does not exist.</param>
        <summary>Gets a tag of a specified type from a file, optionally creating the tag if it doesn't exist and the file supports it.</summary>
        <returns>A <see cref="T:TagLib.Tag" /> if one was found or created, otherwise <see langword="null" />.</returns>
        <remarks>GetTag can be used for accessing various non-abstracted features of tags.
<example><code lang="C#">string [] GetMoods (TagLib.File file)
{
   get
   {
      TagLib.Id3v2.Tag id3 = file.GetTag (TagLib.TagTypes.Id3v2);
      if (id3 != null)
      {
         TextIdentificationFrame f = TextIdentificationFrame.Get (this, "TMOO");
         if (f != null) return f.FieldList.ToArray ();
      }
      
      TagLib.Asf.Tag asf = file.GetTag (TagLib.TagTypes.Asf);
      if (asf != null)
      {
         string [] value = asf.GetDescriptorStrings ("WM/Mood", "Mood");
         if (value.Length &gt; 0) return value;
      }
      
      TagLib.Ape.Tag ape = file.GetTag (TagLib.TagTypes.Ape);
      if (ape != null)
      {
         Item item = ape.GetItem ("MOOD");
         if (item != null) return item.ToStringArray ();
      }
      
      // Whatever tag types you want...
      
      return new string [] {};
   }
}</code></example></remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTag">
      <MemberSignature Language="C#" Value="public TagLib.Tag GetTag (TagLib.TagTypes type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Tag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TagLib.TagTypes" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="T:TagLib.TagTypes" /> specifying what type of tag to get.</param>
        <summary>Gets a tag of a specified type from a file.</summary>
        <returns>A <see cref="T:TagLib.Tag" /> if one was found, otherwise <see langword="null" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static TagLib.File Create (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">A <see cref="T:System.String" /> specifying the path of the file in the default file system.</param>
        <summary>Creates a new instance of a <see cref="T:TagLib.File" /> child class based on the file extention.</summary>
        <returns>A new <see cref="T:TagLib.File" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static TagLib.File Create (string path, TagLib.ReadStyle propertiesStyle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="propertiesStyle" Type="TagLib.ReadStyle" />
      </Parameters>
      <Docs>
        <param name="path">A <see cref="T:System.String" /> specifying the path of the file in the default file system.</param>
        <param name="propertiesStyle">A <see cref="T:TagLib.ReadStyle" /> specifying the detail at which to read the properties.</param>
        <summary>Creates a new instance of a <see cref="T:TagLib.File" /> child class based on the file extention.</summary>
        <returns>A new <see cref="T:TagLib.File" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static TagLib.File Create (string path, string mimetype, TagLib.ReadStyle propertiesStyle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="mimetype" Type="System.String" />
        <Parameter Name="propertiesStyle" Type="TagLib.ReadStyle" />
      </Parameters>
      <Docs>
        <param name="path">A <see cref="T:System.String" /> specifying the path of the file in the default file system.</param>
        <param name="mimetype">A <see cref="T:System.String" /> containing the mime-type to use when reading the file.</param>
        <param name="propertiesStyle">A <see cref="T:TagLib.ReadStyle" /> specifying the detail at which to read the properties.</param>
        <summary>Creates a new instance of a <see cref="T:TagLib.File" /> child class for a specified mime-type.</summary>
        <returns>A new <see cref="T:TagLib.File" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddFileTypeResolver">
      <MemberSignature Language="C#" Value="public static void AddFileTypeResolver (TagLib.File.FileTypeResolver resolver);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="resolver" Type="TagLib.File+FileTypeResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">A <see cref="T:TagLib.File+FileTypeResolver" /> to add to the file type recognition actions.</param>
        <summary>Adds a <see cref="T:TagLib.File+FileTypeResolver" /> to the <see cref="T:TagLib.File" /> class. The one added last gets run first.</summary>
        <remarks>A <see cref="T:TagLib.File+FileTypeResolver" /> adds support for recognizing a file type outside of the standard mime-type methods.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Truncate">
      <MemberSignature Language="C#" Value="protected void Truncate (long length);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="length">A <see cref="T:System.Int64" /> specifying the length in bytes to resize the file to.</param>
        <summary>Resizes the file to a specified size.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the current instance, as used by the file abstraction creator.</summary>
        <value>A <see cref="T:System.String" /> containing the name of the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MimeType">
      <MemberSignature Language="C#" Value="public string MimeType { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the mime type of the current instance.</summary>
        <value>A <see cref="T:System.String" /> representing the mime type of the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public abstract TagLib.Tag Tag { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Tag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a generic representation of all of the tags contained within the current instance.</summary>
        <value>A <see cref="T:TagLib.Tag" /> representing all the tags in the current instance. This will typically be a combination of tags such setting the value for this <see cref="T:TagLib.Tag" /> will set the value for each <see cref="T:TagLib.Tag" /> in the current instance.</value>
        <remarks>To access or add a specific type of tag, <see cref="M:TagLib.File.GetTag(TagLib.TagTypes,bool)" /> should be used.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Properties">
      <MemberSignature Language="C#" Value="public abstract TagLib.Properties Properties { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Properties</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the media properties of the current instance.</summary>
        <value>A <see cref="T:TagLib.Properties" /> containing media properties of the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Tell">
      <MemberSignature Language="C#" Value="public long Tell { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the file seek position in the current instance.</summary>
        <value>A <see cref="T:System.Int64" /> indicating the current position of the read/write pointer in number of bytes from the beginning of the file, or 0 if the file is not open for reading or writing.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public long Length { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the length of the file represented by the current instance.</summary>
        <value>A <see cref="T:System.Int64" /> representing the size of the file.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public TagLib.File.AccessMode Mode { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.File+AccessMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets and sets the current access mode for the current instance.</summary>
        <value>A <see cref="T:TagLib.File+AccessMode" /> describing the features of the current instance's stream.</value>
        <remarks>Changing will cause the current stream to be closed, except when a change is made from <see cref="F:TagLib.File+AccessMode.Write" /> to <see cref="F:TagLib.File+AccessMode.Read" /> which has no effect.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferSize">
      <MemberSignature Language="C#" Value="public static uint BufferSize { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the buffer size used in file read actions.</summary>
        <value>A <see cref="T:System.UInt32" /> representing the number of bytes stored in the buffer.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TagTypes">
      <MemberSignature Language="C#" Value="public TagLib.TagTypes TagTypes { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.TagTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the tag types present in the current instance.</summary>
        <value>A <see cref="T:TagLib.TagTypes" /> containing a bitwise combined list of tags.</value>
        <remarks>TagLib# automatically adds reasonable defaults to tags to make sure optimal tagging is possible. To see the tags in the physical file, use <see cref="P:TagLib.File.TagTypesOnDisk" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TagTypesOnDisk">
      <MemberSignature Language="C#" Value="public TagLib.TagTypes TagTypesOnDisk { protected set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.TagTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the tag types present in phyical file represented by the current instance.</summary>
        <value>A <see cref="T:TagLib.TagTypes" /> containing a bitwise combined list of tags.</value>
        <remarks>TagLib# automatically adds reasonable defaults to tags to make sure optimal tagging is possible. To see the tags in the current instance, use <see cref="P:TagLib.File.TagTypes" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected File (TagLib.File.IFileAbstraction abstraction);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="abstraction" Type="TagLib.File+IFileAbstraction" />
      </Parameters>
      <Docs>
        <param name="abstraction">A <see cref="T:TagLib.File+IFileAbstraction" /> providing a file abstraction to use to access the contents.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.File" /> for a given file abstraction.</summary>
        <remarks>Files should be created using <see cref="M:TagLib.File.Create(TagLib.File.IFileAbstraction)" /> rather than through format specific constructors.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static TagLib.File Create (TagLib.File.IFileAbstraction abstraction);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="abstraction" Type="TagLib.File+IFileAbstraction" />
      </Parameters>
      <Docs>
        <param name="abstraction">A <see cref="T:TagLib.File+IFileAbstraction" /> providing a file abstraction to use to access the contents.</param>
        <summary>Creates a new instance of a <see cref="T:TagLib.File" /> child class based on the file extention.</summary>
        <returns>A new <see cref="T:TagLib.File" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static TagLib.File Create (TagLib.File.IFileAbstraction abstraction, string mimetype, TagLib.ReadStyle propertiesStyle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="abstraction" Type="TagLib.File+IFileAbstraction" />
        <Parameter Name="mimetype" Type="System.String" />
        <Parameter Name="propertiesStyle" Type="TagLib.ReadStyle" />
      </Parameters>
      <Docs>
        <param name="abstraction">A <see cref="T:TagLib.File+IFileAbstraction" /> providing a file abstraction to use to access the contents.</param>
        <param name="mimetype">A <see cref="T:System.String" /> containing the mime-type to use when reading the file.</param>
        <param name="propertiesStyle">A <see cref="T:TagLib.ReadStyle" /> specifying the detail at which to read the properties.</param>
        <summary>Creates a new instance of a <see cref="T:TagLib.File" /> child class for a specified mime-type.</summary>
        <returns>A new <see cref="T:TagLib.File" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static TagLib.File Create (TagLib.File.IFileAbstraction abstraction, TagLib.ReadStyle propertiesStyle);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.File</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="abstraction" Type="TagLib.File+IFileAbstraction" />
        <Parameter Name="propertiesStyle" Type="TagLib.ReadStyle" />
      </Parameters>
      <Docs>
        <param name="abstraction">A <see cref="T:TagLib.File+IFileAbstraction" /> providing a file abstraction to use to access the contents.</param>
        <param name="propertiesStyle">A <see cref="T:TagLib.ReadStyle" /> specifying the detail at which to read the properties.</param>
        <summary>Creates a new instance of a <see cref="T:TagLib.File" /> child class based on the file extention.</summary>
        <returns>A new <see cref="T:TagLib.File" />.</returns>
        <remarks />
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>This abstract class is used to access tagging and properties for files.</summary>
    <remarks />
  </Docs>
</Type>
