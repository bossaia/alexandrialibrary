<Type Name="BitmapInfoHeader" FullName="TagLib.Riff.BitmapInfoHeader">
  <TypeSignature Language="C#" Value="public struct BitmapInfoHeader : TagLib.IVideoCodec" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>TagLib.IVideoCodec</InterfaceName>
    </Interface>
  </Interfaces>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BitmapInfoHeader (TagLib.ByteVector data);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="data" Type="TagLib.ByteVector" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:TagLib.ByteVector" /> containing a Microsoft BitmapInfoHeader structure.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.Riff.BitmapInfoHeader" /> by reading from a Microsoft BitmapInfoHeader structure.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BitmapInfoHeader (TagLib.ByteVector data, int offset);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="data" Type="TagLib.ByteVector" />
        <Parameter Name="offset" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="data">A <see cref="T:TagLib.ByteVector" /> containing a Microsoft BitmapInfoHeader structure.</param>
        <param name="offset">A <see cref="T:System.Int32" /> specifying at what index the structure begins.</param>
        <summary>Constructs and initializes a new instance of <see cref="T:TagLib.Riff.BitmapInfoHeader" /> by reading from a Microsoft BitmapInfoHeader structure.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="HeaderSize">
      <MemberSignature Language="C#" Value="public uint HeaderSize { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the header size of the current instance.</summary>
        <value>A <see cref="T:System.UInt32" /> containing the header size.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Planes">
      <MemberSignature Language="C#" Value="public ushort Planes { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of planes in current instance.</summary>
        <value>A <see cref="T:System.UInt16" /> containing the number of planes.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="BitCount">
      <MemberSignature Language="C#" Value="public ushort BitCount { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bit count of the current instance.</summary>
        <value>A <see cref="T:System.UInt16" /> containing the bit count.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CompressionId">
      <MemberSignature Language="C#" Value="public TagLib.ByteVector CompressionId { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.ByteVector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the FourCC compression ID used by the current instance.</summary>
        <value>A <see cref="T:TagLib.ByteVector" /> containing the FourCC compression ID.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ImageSize">
      <MemberSignature Language="C#" Value="public uint ImageSize { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the size of the image in the current instance.</summary>
        <value>A <see cref="T:System.UInt32" /> containing the image size.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="XPixelsPerMeter">
      <MemberSignature Language="C#" Value="public uint XPixelsPerMeter { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of horizontal pixels per meter in the current instance.</summary>
        <value>A <see cref="T:System.UInt32" /> containing the number of horizontal pixels per meter.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="YPixelsPerMeter">
      <MemberSignature Language="C#" Value="public uint YPixelsPerMeter { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of vertical pixels per meter in the current instance.</summary>
        <value>A <see cref="T:System.UInt32" /> containing the number of vertical pixels per meter.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ColorsUsed">
      <MemberSignature Language="C#" Value="public uint ColorsUsed { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of color used in the current instance.</summary>
        <value>A <see cref="T:System.UInt32" /> containing the number of colors used.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a plain text description of the current instance.</summary>
        <value>A <see cref="T:System.String" /> describing the current instance.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public TimeSpan Duration { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the duration of the current instance.</summary>
        <value>Always <see cref="F:System.TimeSpan.Zero" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MediaTypes">
      <MemberSignature Language="C#" Value="public TagLib.MediaTypes MediaTypes { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.MediaTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the media types contained in the current instance.</summary>
        <value>Always <see cref="F:TagLib.MediaTypes.Video" />.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="VideoWidth">
      <MemberSignature Language="C#" Value="public int VideoWidth { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the width of the video.</summary>
        <value>A <see cref="System.Int32" /> representing the width of the video.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="VideoHeight">
      <MemberSignature Language="C#" Value="public int VideoHeight { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the height of the video.</summary>
        <value>A <see cref="T:System.Int32" /> representing the height of the video.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ImportantColors">
      <MemberSignature Language="C#" Value="public uint ImportantColors { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of important colors in the current instance.</summary>
        <value>A <see cref="T:System.UInt32" /> contining the number of important colors.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TagLib.Riff.BitmapInfoHeader other);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="TagLib.Riff.BitmapInfoHeader" />
      </Parameters>
      <Docs>
        <param name="other">A <see cref="T:TagLib.Riff.BitmapInfoHeader" /> to compare to the current instance.</param>
        <summary>Compares the current instance to another BitmapInfoHeader structure to determine if they are equal to eachother.</summary>
        <returns>
          <see langword="true" /> if they are equal. Otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (TagLib.Riff.BitmapInfoHeader first, TagLib.Riff.BitmapInfoHeader second);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="TagLib.Riff.BitmapInfoHeader" />
        <Parameter Name="second" Type="TagLib.Riff.BitmapInfoHeader" />
      </Parameters>
      <Docs>
        <param name="first">The first <see cref="T:TagLib.Riff.BitmapInfoHeader" /> to compare.</param>
        <param name="second">The second <see cref="T:TagLib.Riff.BitmapInfoHeader" /> to compare.</param>
        <summary>Compares two BitmapInfoHeader structures to determine if they are equal to eachother.</summary>
        <returns>
          <see langword="true" /> if they are equal. Otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (TagLib.Riff.BitmapInfoHeader first, TagLib.Riff.BitmapInfoHeader second);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="TagLib.Riff.BitmapInfoHeader" />
        <Parameter Name="second" Type="TagLib.Riff.BitmapInfoHeader" />
      </Parameters>
      <Docs>
        <param name="first">The first <see cref="T:TagLib.Riff.BitmapInfoHeader" /> to compare.</param>
        <param name="second">The second <see cref="T:TagLib.Riff.BitmapInfoHeader" /> to compare.</param>
        <summary>Compares two BitmapInfoHeader structures to determine if they are unequal to eachother.</summary>
        <returns>
          <see langword="true" /> if they are unequal. Otherwise <see langword="false" />.</returns>
        <remarks />
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>This class is used to access a Microsoft BitmapInfoHeader structure, and provides <see cref="T:TagLib.IVideoCodec" /> support for it.</summary>
    <remarks />
  </Docs>
</Type>
