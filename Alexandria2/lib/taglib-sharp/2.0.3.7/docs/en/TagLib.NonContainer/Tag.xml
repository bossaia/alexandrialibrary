<Type Name="Tag" FullName="TagLib.NonContainer.Tag">
  <TypeSignature Language="C#" Value="public class Tag : TagLib.CombinedTag" />
  <AssemblyInfo>
    <AssemblyName>taglib-sharp</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>TagLib.CombinedTag</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tag (TagLib.NonContainer.File file);" />
      <MemberType>Constructor</MemberType>
      <Parameters>
        <Parameter Name="file" Type="TagLib.NonContainer.File" />
      </Parameters>
      <Docs>
        <param name="file">A <see cref="T:TagLib.NonContainer.File" /> to read from and write to.</param>
        <summary>Constructs and intializes a new instance of <see cref="T:TagLib.NonContainer.Tag" /> for a specified file.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetTag">
      <MemberSignature Language="C#" Value="public TagLib.Tag GetTag (TagLib.TagTypes type);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.Tag</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="TagLib.TagTypes" />
      </Parameters>
      <Docs>
        <param name="type">A <see cref="T:TagLib.TagTypes" /> specifying what type of tag to get.</param>
        <summary>Gets a tag of a specified type from the current instance.</summary>
        <returns>A <see cref="T:TagLib.Tag" /> if one was found, otherwise <see langword="null" />.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveTags">
      <MemberSignature Language="C#" Value="public void RemoveTags (TagLib.TagTypes types);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="TagLib.TagTypes" />
      </Parameters>
      <Docs>
        <param name="types">A <see cref="T:TagLib.TagTypes" /> containing bitwise combined tag types to be removed from the current instance.</param>
        <summary>Removes a variety of tags from the current file.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public void Read (out long start, out long end);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int64&amp;" RefType="out" />
        <Parameter Name="end" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="start">A <see cref="T:System.Int64" /> containing the seek position at which tagging ends at the beginning of the file.</param>
        <param name="end">A <see cref="T:System.Int64" /> containing the seek position at which tagging begins at the end of the file.</param>
        <summary>Reads the tags from the start and end of the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReadStart">
      <MemberSignature Language="C#" Value="public long ReadStart ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the tags from the start of the current instance.</summary>
        <returns>A <see cref="T:System.Int64" /> containing the seek position at which tagging ends at the beginning of the file.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ReadEnd">
      <MemberSignature Language="C#" Value="public long ReadEnd ();" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reads the tags from the end of the current instance.</summary>
        <returns>A <see cref="T:System.Int64" /> containing the seek position at which tagging begins at the end of the file.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public void Write (out long start, out long end);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int64&amp;" RefType="out" />
        <Parameter Name="end" Type="System.Int64&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="start">A <see cref="T:System.Int64" /> containing the seek position at which tagging ends at the beginning of the file.</param>
        <param name="end">A <see cref="T:System.Int64" /> containing the seek position at which tagging begins at the end of the file.</param>
        <summary>Writes the tags to the start and end of the current instance.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="StartTag">
      <MemberSignature Language="C#" Value="public TagLib.NonContainer.StartTag StartTag { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.NonContainer.StartTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the tag collection at the start of the file represented by the current instance.</summary>
        <value>A <see cref="T:TagLib.NonContainer.StartTag" /> containing the collection of that at the start of the file.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="EndTag">
      <MemberSignature Language="C#" Value="public TagLib.NonContainer.EndTag EndTag { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>TagLib.NonContainer.EndTag</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the tag collection at the start of the file represented by the current instance.</summary>
        <value>A <see cref="T:TagLib.NonContainer.StartTag" /> containing the collection of that at the start of the file.</value>
        <remarks />
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>This class is used to combine <see cref="T:TagLib.NonContainer.StartTag" /> and <see cref="T:TagLib.NonContainer.EndTag" />.</summary>
    <remarks />
  </Docs>
</Type>
